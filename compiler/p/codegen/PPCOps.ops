!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!! Copyright (c) 2000, 2018 IBM Corp. and others
!!
!! This program and the accompanying materials are made available under
!! the terms of the Eclipse Public License 2.0 which accompanies this
!! distribution and is available at http://eclipse.org/legal/epl-2.0
!! or the Apache License, Version 2.0 which accompanies this distribution
!! and is available at https://www.apache.org/licenses/LICENSE-2.0.
!!
!! This Source Code may also be made available under the following Secondary
!! Licenses when the conditions for such availability set forth in the
!! Eclipse Public License, v. 2.0 are satisfied: GNU General Public License,
!! version 2 with the GNU Classpath Exception [1] and GNU General Public
!! License, version 2 with the OpenJDK Assembly Exception [2].
!!
!! [1] https://www.gnu.org/software/classpath/license.html
!! [2] http://openjdk.java.net/legal/assembly-exception.html
!!
!! SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!                                                                       !!
!! After updating this file you should                                   !!
!!     1) run 'perl $OMR/tools/compiler/p/ftops.pl'. This will           !!
!!        re-generate various files.                                     !!
!!     2) check the newly created files into source control.             !!
!!                                                                       !!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!                                                                                                     !!
!! Brief Summary of AltFormat(x) OpCode Property:                                                      !!
!!                                                                                                     !!
!! AltFormatx for fixed point (eg 'and')        - any format with target in RA, first source in RS     !!
!!                                                (single source or may have a second source in RB)    !!
!! AltFormat for load/store (eg 'lbzux')        - any X-form                                           !!
!! AltFormat for fixed point (eg 'mtctr')       - only 1 source in RS                                  !!
!! AltFormat for floating point (eg 'fabs')     - X-form with target in FRT, only 1 source in FRB, or  !!
!!                              (eg 'fmul')     - X-form with target in FRT, 2 sources in FRA and FRC  !!
!! AltFormat for VMX - ?                                                                               !!
!!                                                                                                     !!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

!Opcode   PPC Name  Binary   Properties
bad       bad       00000000     		                                                           // Illegal Opcode
!brd       brd       7c0001b6 AltFormatx,SyncSideEffectFree                                                 // Byte-Reverse Doubleword
!brh       brh       7c000176 AltFormatx,SyncSideEffectFree                                                 // Byte-Reverse Halfword
!brw       brw       7c000136 AltFormatx,SyncSideEffectFree                                                 // Byte-Reverse Word
add       add       7c000214 HasRecordForm,SyncSideEffectFree                                              // Add
addc      addc      7c000014 SetsCarryFlag,HasRecordForm,SyncSideEffectFree                                // Add carrying
addco     addco     7c000414 SetsCarryFlag,SetsOverflowFlag,HasRecordForm,SyncSideEffectFree               // Add carrying setting overflow
adde      adde      7c000114 ReadsCarryFlag,SetsCarryFlag,HasRecordForm,SyncSideEffectFree                 // Add extended
addeo     addeo     7c000514 ReadsCarryFlag,SetsCarryFlag,SetsOverflowFlag,HasRecordForm,SyncSideEffectFree// Add extended setting overflow
addi      addi      38000000 SyncSideEffectFree                                                            // Add immediate
addic     addic     30000000 SetsCarryFlag,HasRecordForm,SyncSideEffectFree                                // Add immediate carrying
addi2     addi      38000000 SetsCarryFlag,HasRecordForm,SyncSideEffectFree                                // Add imm (carry bit set only if record form)
addis     addis     3c000000 SyncSideEffectFree                                                            // Add immediate shifted
addme     addme     7c0001d4 ReadsCarryFlag,SetsCarryFlag,HasRecordForm,SyncSideEffectFree                 // Add to minus one extended
addmeo    addmeo    7c0005d4 ReadsCarryFlag,SetsCarryFlag,SetsOverflowFlag,HasRecordForm,SyncSideEffectFree// Add to minus one extended setting overflow
addo      addo      7c000614 SetsOverflowFlag,HasRecordForm,SyncSideEffectFree                             // Add setting overflow
addpcis   addpcis   4c000004 SyncSideEffectFree                                                            //Add PC Immediate Shifted
addze     addze     7c000194 ReadsCarryFlag,SetsCarryFlag,HasRecordForm,SyncSideEffectFree                 // Add to zero extended
addzeo    addzeo    7c000594 ReadsCarryFlag,SetsCarryFlag,SetsOverflowFlag,HasRecordForm,SyncSideEffectFree// Add to zero extended setting overflow
and       and       7c000038 HasRecordForm,AltFormatx,SyncSideEffectFree                                   // AND
andc      andc      7c000078 HasRecordForm,AltFormatx,SyncSideEffectFree                                   // AND with complement
!andcxor   andcxor   10000037 AltFormatx,SyncSideEffectFree                                                 // AND with Complement & XOR
addex     addex     7c000154 HasRecordForm,SyncSideEffectFree                                              // Add Extended using alternate carry bits
andi_r    andi.     70000000 IsRecordForm,AltFormatx,SyncSideEffectFree                                    // AND immediate
andis_r   andis.    74000000 IsRecordForm,AltFormatx,SyncSideEffectFree                                    // AND immediate shifted
b         b         48000000 BranchOp                                                                      // Unconditional branch
ba        ba        48000002 BranchOp                                                                      // Branch to absolute address
bctr      bctr      4E800420 BranchOp,UsesCtr                                                              // Branch to count register
bctrl     bctrl     4E800421 BranchOp,UsesCtr                                                              // Branch to count register and link
bdnz      bdnz      42000000 BranchOp,UsesCtr,SetsCtr                                                      // Branch if CTR!=0 after decrementing it
bdz       bdz       42400000 BranchOp,UsesCtr,SetsCtr                                                      // Branch if CTR==0 after decrementing it
beq       beq       41820000 BranchOp                                                                      // Branch if equal
beql      beql      41820001 BranchOp                                                                      // Branch and link if equal
bfctr     bfctr     4C800020 BranchOp,UsesCtr                                                              // Branch false to count register
bge       bge       40800000 BranchOp                                                                      // Branch if greater than or equal
bgel      bgel      40800001 BranchOp                                                                      // Branch and link if greater than or equal
bgt       bgt       41810000 BranchOp                                                                      // Branch if greater than
bgtl      bgtl      41810001 BranchOp                                                                      // Branch and link if greater than
bl        bl        48000001 BranchOp                                                                      // Branch and link
ble       ble       40810000 BranchOp                                                                      // Branch if less than or equal
blel      blel      40810001 BranchOp                                                                      // Branch and link if less than or equal
blt       blt       41800000 BranchOp                                                                      // Branch if less than
bltl      bltl      41800001 BranchOp                                                                      // Branch and link if less than
bla       bla       48000003 BranchOp                                                                      // Branch and link to absolute address
blr       blr       4e800020 BranchOp                                                                      // Branch to link register
blrl      blrl      4e800021 BranchOp                                                                      // Branch to link register and link
bne       bne       40820000 BranchOp                                                                      // Branch if not equal
bnel      bnel      40820001 BranchOp                                                                      // Branch and link if not equal
bnun      bnu       40830000 BranchOp                                                                      // Branch if not unordered
btctr     btctr     4D800020 BranchOp,UsesCtr                                                              // Branch true to count register
bun       bun       41830000 BranchOp                                                                      // Branch if unordered
beqlr     beqlr     4d820020 BranchOp                                                                      // Branch to link register if equal
bgelr     bgelr     4c800020 BranchOp                                                                      // Branch to link register if greater than or equal
bgtlr     bgtlr     4d810020 BranchOp                                                                      // Branch to link register if greater than
blelr     blelr     4c810020 BranchOp                                                                      // Branch to link register if less than or equal
bltlr     bltlr     4d800020 BranchOp                                                                      // Branch to link register if less than
bnelr     bnelr     4c820020 BranchOp                                                                      // Branch to link register if not equal
cmp4      cmpw      7c000000 CompareOp,SyncSideEffectFree                                                  // Compare word algebraic
cmp8      cmpd      7c200000 DWord,CompareOp,SyncSideEffectFree                                            // Compare dword algebraic
cmpi4     cmpwi     2C000000 CompareOp,SyncSideEffectFree                                                  // Compare word immediate algebraic
cmpi8     cmpdi     2C200000 DWord,CompareOp,SyncSideEffectFree                                            // Compare dword immediate algebraic
cmpl4     cmplw     7C000040 CompareOp,SyncSideEffectFree                                                  // Compare word logical
cmpl8     cmpld     7C200040 DWord,CompareOp,SyncSideEffectFree                                            // Compare dword logical
cmpli4    cmplwi    28000000 CompareOp,SyncSideEffectFree                                                  // Compare word immediate logical
cmpli8    cmpldi    28200000 DWord,CompareOp,SyncSideEffectFree                                            // Compare dword immediate logical
cmprb     cmprb     7c000180 CompareOp,SyncSideEffectFree                                                  // Compare Ranged Byte
cmpeqb    cmpeqb    7c0001c0 CompareOp,SyncSideEffectFree                                                  // Compare Equal Byte
cntlzd    cntlzd    7c000074 HasRecordForm,AltFormatx,DWord,SyncSideEffectFree                             // Count leading zeros dword
cntlzw    cntlzw    7c000034 HasRecordForm,AltFormatx,SyncSideEffectFree                                   // Count leading zeros word
!cnttzw    cnttzw    7c000434 HasRecordForm,AltFormatx,SyncSideEffectFree                                   // Count Trailing Zeros Word
!cnttzd    cnttzd    7c000474 HasRecordForm,AltFormatx,SyncSideEffectFree                                   // Count Trailing Zeros Dword
crand     crand     4c000202 CRLogical,SyncSideEffectFree                                                  // Condition register AND
crandc    crandc    4c000102 CRLogical,SyncSideEffectFree                                                  // Condition register AND with complement
creqv     creqv     4c000242 CRLogical,SyncSideEffectFree                                                  // Condition register equivalent
crnand    crnand    4c0001c2 CRLogical,SyncSideEffectFree                                                  // Condition register NAND
crnor     crnor     4c000042 CRLogical,SyncSideEffectFree                                                  // Condition register NOR
cror      cror      4c000382 CRLogical,SyncSideEffectFree                                                  // Condition register OR
crorc     crorc     4c000342 CRLogical,SyncSideEffectFree                                                  // Condition register OR with complement
crxor     crxor     4c000182 CRLogical,SyncSideEffectFree                                                  // Condition register XOR
dadd      dadd      ec000004 DoubleFP,HasRecordForm,ReadsFPSCR,SyncSideEffectFree                          // Add (DFP64)
darn      darn      7c0005e6 SyncSideEffectFree                                                            // Deliver a random number
dcbt      dcbt      7c00022c IsLoad,AltFormat                                                              // Data cache block touch
dcbtst    dcbtst    7c0001ec IsLoad,AltFormat                                                              // Data cache block touch for store
dcbtstt   dcbtstt   7e0001ec IsLoad,AltFormat                                                              // Data cache block touch for store - transient
dcbtt     dcbtt     7e00022c IsLoad,AltFormat                                                              // Data cache block touch - transient
dcbz      dcbz      7c0007ec IsStore,AltFormat                                                             // Data cache block zero
dcffix    dcffix    ec000644 DoubleFP,HasRecordForm,AltFormat,ReadsFPSCR,SyncSideEffectFree                // Convert From Fixed (DFP64)
dcffixq   dcffixq   fc000644 DoubleFP,HasRecordForm,AltFormat,ReadsFPSCR,SyncSideEffectFree                // Convert From Fixed (DFP128)
dcmpu     dcmpu     ec000504 DoubleFP,CompareOp,SyncSideEffectFree                                         // Unordered Compare (DFP64)
dctfix    dctfix    ec000244 DoubleFP,HasRecordForm,AltFormat,ReadsFPSCR,SyncSideEffectFree                // Convert to Fixed (DFP64)
ddedpd    ddedpd    ec000284 DoubleFP,HasRecordForm,AltFormat,SyncSideEffectFree                           // Decode DPD to BCD (DFP64)
ddiv      ddiv      ec000444 DoubleFP,HasRecordForm,ReadsFPSCR,SetsFPSCR,SyncSideEffectFree                // Divide  (DFP64)
denbcdu   denbcdu   ec000684 DoubleFP,HasRecordForm,AltFormat,SyncSideEffectFree                           // Encode Unsigned BCD to DFP (DFP64)
divd      divd      7c0003d2 HasRecordForm,DWord,SyncSideEffectFree                                        // Divide dword
diex      diex      ec0006c4 DoubleFP,HasRecordForm,SyncSideEffectFree                                     // Insert Biased Exponent (DFP64)
divdo     divdo     7c0007d2 HasRecordForm,SetsOverflowFlag,DWord,SyncSideEffectFree                       // Divide dword setting overflow
divdu     divdu     7c000392 HasRecordForm,DWord,SyncSideEffectFree                                        // Divide dword unsigned
divduo    divduo    7c000792 HasRecordForm,SetsOverflowFlag,DWord,SyncSideEffectFree                       // Divide dword unsigned setting overflow
divw      divw      7c0003d6 HasRecordForm,SyncSideEffectFree                                              // Divide word
divwo     divwo     7c0007d6 HasRecordForm,SetsOverflowFlag,SyncSideEffectFree                             // Divide word setting overflow
divwu     divwu     7c000396 HasRecordForm,SyncSideEffectFree                                              // Divide word unsigned
divwuo    divwuo    7c000796 HasRecordForm,SetsOverflowFlag,SyncSideEffectFree                             // Divide word unsigned setting overflow
dmul      dmul      ec000044 DoubleFP,HasRecordForm,ReadsFPSCR,SyncSideEffectFree                          // Multiply (DFP64)
dqua      dqua      ec000006 DoubleFP,HasRecordForm,ReadsFPSCR,SetsFPSCR,SyncSideEffectFree                // Quantize (DFP64)
drrnd     drrnd     ec000046 DoubleFP,HasRecordForm,ReadsFPSCR,SyncSideEffectFree                          // Reround (DFP64)
drdpq     drdpq     fc000604 DoubleFP,HasRecordForm,AltFormat,ReadsFPSCR,SyncSideEffectFree                // Round To DFP64 (DFP128)
dsub      dsub      ec000404 DoubleFP,HasRecordForm,ReadsFPSCR,SyncSideEffectFree                          // Subtract (DFP64)
dtstdc    dtstdc    ec000184 DoubleFP,SyncSideEffectFree                                                   // Test Data Class (DFP64)
dtstdg    dtstdg    ec0001c4 DoubleFP,SyncSideEffectFree                                                   // Test Data Group (DFP64)
!dtstsfi   dtstsfi   ec000546 AltFormat,SyncSideEffectFree                                                  // DFP Test Significance Immediate
!dtstsfiq  dtstsfiq  fc000546 AltFormat,SyncSideEffectFree                                                  // DFP Test Significance Immediate Quad
dxex      dxex      ec0002c4 DoubleFP,HasRecordForm,AltFormat,SyncSideEffectFree                           // Extract Biased Exponent (DFP64)
eieio     eieio     7c0006ac                                                                               // Enforce in order execution of I/O
eqv       eqv       7c000238 HasRecordForm,AltFormatx                                                      // Equivalent
extsb     extsb     7c000774 HasRecordForm,AltFormatx,SyncSideEffectFree                                   // Extend sign byte
extsh     extsh     7c000734 HasRecordForm,AltFormatx,SyncSideEffectFree                                   // Extend sign half word
extsw     extsw     7c0007b4 HasRecordForm,AltFormatx,SyncSideEffectFree                                   // Extend sign word
extswsli  extswsli  7c0006f4 HasRecordForm,AltFormatx,SyncSideEffectFree                                   // Extend Sign Word & Shift Left Immediate
fabs      fabs      fc000210 DoubleFP,SingleFP,AltFormat,SyncSideEffectFree                                // Floating absolute value
fadd      fadd      fc00002a DoubleFP,SyncSideEffectFree                                                   // Floating add
fadds     fadds     ec00002a SingleFP,SyncSideEffectFree                                                   // Floating add single
fcfid     fcfid     fc00069c AltFormat,SyncSideEffectFree                                                  // Floating convert from integer dword
fcfidu    fcfidu    fc00079c AltFormat,SyncSideEffectFree                                                  // Floating convert from integer dword unsigned
fcfids    fcfids    ec00069c AltFormat,SyncSideEffectFree                                                  // Floating convert from integer dword single
fcfidus   fcfidus   ec00079c AltFormat,SyncSideEffectFree                                                  // Floating convert from integer dword unsigned single
fcmpo     fcmpo     fc000040 DoubleFP,SingleFP,CompareOp,SyncSideEffectFree                                // Floating compare ordered
fcmpu     fcmpu     fc000000 DoubleFP,SingleFP,CompareOp,SyncSideEffectFree                                // Floating compare unordered
fcpsgn    fcpsgn    fc000010 DoubleFP,SingleFP,SyncSideEffectFree                                          // Floating copy sign
fctid     fctid     fc00065c DoubleFP,SingleFP,AltFormat,SyncSideEffectFree                                // Floating convert to integer dword
fctidz    fctidz    fc00065e DoubleFP,SingleFP,AltFormat,SyncSideEffectFree                                // Floating convert to integer dword round toward zero
fctiw     fctiw     fc00001c DoubleFP,SingleFP,AltFormat,SyncSideEffectFree                                // Floating convert to integer word
fctiwz    fctiwz    fc00001e DoubleFP,SingleFP,AltFormat,SyncSideEffectFree                                // Floating convert to integer word round toward zero
fdiv      fdiv      fc000024 DoubleFP,SyncSideEffectFree                                                   // Floating divide double
fdivs     fdivs     ec000024 SingleFP,SyncSideEffectFree                                                   // Floating divide single
fmadd     fmadd     fc00003a DoubleFP,SyncSideEffectFree                                                   // Floating multiply add double
fmadds    fmadds    ec00003a SingleFP,SyncSideEffectFree                                                   // Floating multiply add single
fmr       fmr       fc000090 DoubleFP,SingleFP,AltFormat,IsRegCopy,SyncSideEffectFree                      // Floating move register
fmsub     fmsub     fc000038 DoubleFP,SyncSideEffectFree                                                   // Floating multiply subtract double
fmsubs    fmsubs    ec000038 SingleFP,SyncSideEffectFree                                                   // Floating multiply subtract single
fmul      fmul      fc000032 DoubleFP,AltFormat,SyncSideEffectFree                                         // Floating multiply  double
fmuls     fmuls     ec000032 SingleFP,AltFormat,SyncSideEffectFree                                         // Floating multiply single
fnabs     fnabs     fc000110 DoubleFP,SingleFP,AltFormat,SyncSideEffectFree                                // Floating negative absolute value
fneg      fneg      fc000050 DoubleFP,SingleFP,AltFormat,SyncSideEffectFree                                // Floating negate
fnmadd    fnmadd    fc00003e DoubleFP,SyncSideEffectFree                                                   // Floating negative multiply add double
fnmadds   fnmadds   ec00003e SingleFP,SyncSideEffectFree                                                   // Floating negative multiply add single
fnmsub    fnmsub    fc00003c DoubleFP,SyncSideEffectFree                                                   // Floating negative multiply subtract double
fnmsubs   fnmsubs   ec00003c SingleFP,SyncSideEffectFree                                                   // Floating negative multiply subtract single
fres      fres      fc000030 DoubleFP,AltFormat,SyncSideEffectFree                                         // Floating reciprocal estimate single
frim      frim      fc0003d0 DoubleFP,AltFormat,SyncSideEffectFree                                         // Floating round to minus (floor) double
frin      frin      fc000310 DoubleFP,AltFormat,SyncSideEffectFree                                         // Floating round to nearest double
frip      frip      fc000390 DoubleFP,AltFormat,SyncSideEffectFree                                         // Floating round to plus (ceil) double
frsp      frsp      fc000018 DoubleFP,AltFormat,SyncSideEffectFree                                         // Floating round to single
frsqrte   frsqrte   fc000034 DoubleFP,AltFormat,SyncSideEffectFree                                         // Floating reciprocal square root estimate
fsel      fsel      fc00002e DoubleFP,SingleFP,SyncSideEffectFree                                          // Floating select
fsqrt     fsqrt     fc00002c DoubleFP,AltFormat,SyncSideEffectFree                                         // Floating square root double
fsqrts    fsqrts    ec00002c SingleFP,AltFormat,SyncSideEffectFree                                         // Floating square root single
fsub      fsub      fc000028 DoubleFP,SyncSideEffectFree                                                   // Floating subtract double
fsubs     fsubs     ec000028 SingleFP,SyncSideEffectFree                                                   // Floating subtract single
isync     isync     4c00012c IsSync                                                                        // Instruction synchronize
lbz       lbz       88000000 IsLoad                                                                        // Load byte and zero extend
lbzu      lbzu      8c000000 UpdateForm,IsLoad                                                             // Load byte and zero extend with update
lbzux     lbzux     7c0000ee UpdateForm,IsLoad,AltFormat                                                   // Load byte and zero extend with update indexed
lbzx      lbzx      7c0000ae IsLoad,AltFormat                                                              // Load byte and zero extend indexed
ld        ld        e8000000 IsLoad,OffsetRequiresWordAlignment                                            // Load dword
ldarx     ldarx     7c0000a8 IsLoad,AltFormat                                                              // Load dword and reserve indexed
ldmx      ldmx      7c00026a IsLoad,AltFormat                                                              // Load dword monitored indexed
lwzmx     lwzmx     7C000268 IsLoad,AltFormat                                                              // Load word and zero monitored indexed
ldu       ldu       e8000001 UpdateForm,IsLoad,OffsetRequiresWordAlignment                                 // Load dword with update
ldux      ldux      7c00006c UpdateForm,IsLoad,AltFormat                                                   // Load dword with update indexed
ldx       ldx       7c00002a IsLoad,AltFormat                                                              // Load dword indexed
lfd       lfd       c8000000 DoubleFP,IsLoad                                                               // Load floating point double
lfdp      lfdp      e4000000 DoubleFP,IsLoad                                                               // Load floating point double pair
lfdu      lfdu      cc000000 DoubleFP,UpdateForm,IsLoad                                                    // Load floating point double with update
lfdux     lfdux     7c0004ee DoubleFP,UpdateForm,IsLoad,AltFormat                                          // Load floating point double with update indexed
lfdx      lfdx      7c0004ae DoubleFP,IsLoad,AltFormat                                                     // Load floating point double indexed
lfdpx     lfdpx     7c00062e DoubleFP,IsLoad,AltFormat                                                     // Load floating point double pair indexed
lfiwax    lfiwax    7c0006ae DoubleFP,IsLoad,AltFormat                                                     // Load floating point as integer word algebraic
lfiwzx    lfiwzx    7c0006ee DoubleFP,IsLoad,AltFormat                                                     // Load floating point as integer word and zero indexed
lfs       lfs       c0000000 SingleFP,IsLoad                                                               // Load floating short
lfsu      lfsu      c4000000 SingleFP,UpdateForm,IsLoad                                                    // Load floating short with update
lfsux     lfsux     7c00046e SingleFP,UpdateForm,IsLoad,AltFormat                                          // Load floating short with update indexed
lfsx      lfsx      7c00042e SingleFP,IsLoad,AltFormat                                                     // Load floating short indexed
lha       lha       a8000000 IsLoad                                                                        // Load half word algebraic
lhau      lhau      ac000000 UpdateForm,IsLoad                                                             // Load half word algebraic
lhaux     lhaux     7c0002ee UpdateForm,IsLoad,AltFormat                                                   // Load half word algebraic
lhax      lhax      7c0002ae IsLoad,AltFormat                                                              // Load half word algebraic
lhbrx     lhbrx     7c00062c IsLoad,AltFormat                                                              // Load half word byte reversed indexed
lhz       lhz       a0000000 IsLoad                                                                        // Load half word and zero extend
lhzu      lhzu      a4000000 UpdateForm,IsLoad                                                             // Load half word and zero extend with update
lhzux     lhzux     7c00026e UpdateForm,IsLoad,AltFormat                                                   // Load half word and zero extend with update indexed
lhzx      lhzx      7c00022e IsLoad,AltFormat                                                              // Load half word and zero extend indexed
li        li        38000000 SyncSideEffectFree                                                            // Load immediate
lis       lis       3c000000 SyncSideEffectFree                                                            // Load immediate shifted
lmw       lmw       b8000000 IsLoad                                                                        // Load multiple word
lswi      lswi      7c0004aa IsLoad                                                                        // Load string word immediate
lswx      lswx      7c00042a IsLoad,AltFormat                                                              // Load string word indexed
lwa       lwa       e8000002 IsLoad,OffsetRequiresWordAlignment                                            // Load word algebraic
lwarx     lwarx     7c000028 IsLoad,AltFormat                                                              // Load word and reserve indexed
lwaux     lwaux     7c0002ea UpdateForm,IsLoad,AltFormat                                                   // Load word algebraic with update indexed
lwax      lwax      7c0002aa IsLoad,AltFormat                                                              // Load word algebraic indexed
lwbrx     lwbrx     7c00042c IsLoad,AltFormat                                                              // Load word byte reverse indexed
ldbrx     ldbrx     7c000428 IsLoad,AltFormat                                                              // Load doubleword byte reverse indexed
lwsync    lwsync    7c2004ac IsSync                                                                        // Lightweight Synchronize
lwz       lwz       80000000 IsLoad                                                                        // Load word and zero extend
lwzu      lwzu      84000000 UpdateForm,IsLoad                                                             // Load word and zero extend with update
lwzux     lwzux     7c00006e UpdateForm,IsLoad,AltFormat                                                   // Load word and zero with update indexed
lwzx      lwzx      7c00002e IsLoad,AltFormat                                                              // Load word and zero extend indexed
!maddhd    maddhd    10000030 SyncSideEffectFree                                                            // Multiply-Add High Dword
!maddhdu   maddhdu   10000031 SyncSideEffectFree                                                            // Multiply-Add High Dword Unsigned
maddld    maddld    10000033 SyncSideEffectFree                                                            // Multiply-Add Low Dword
mcrf      mcrf      4c000000 SyncSideEffectFree                                                            // Move condition register field
mcrfs     mcrfs     fc000080 ReadsFPSCR,SyncSideEffectFree                                                 // Move to condition register field from FPSCR
mcrxr     mcrxr     7c000400 SyncSideEffectFree                                                            // Move to condition register field from XER
!mcrxrx    mcrxrx    7c000480 SyncSideEffectFree,CompareOp                                                  // Move XER to CR Extended
mfcr      mfcr      7c000026 SyncSideEffectFree                                                            // Move from condition register to gpr
mfocrf    mfocrf    7c100026 SyncSideEffectFree                                                            // Move from one condition register field to gpr (XFX-form)
mfctr     mfctr     7c0902a6 UsesCtr,SyncSideEffectFree                                                    // Move from count register to gpr
mffgpr    mffgpr    7c0004be DoubleFP,SingleFP,AltFormat,SyncSideEffectFree                                // Move Floating-Point From GPR
mffs      mffs      fc00048e SyncSideEffectFree                                                            // Move from FPSCR to gpr
mflr      mflr      7c0802a6 SyncSideEffectFree                                                            // Move from link register to gpr
mfmsr     mfmsr     7c0000a6 SyncSideEffectFree                                                            // Move from machine state register
mfspr     mfspr     7c0002a6 SyncSideEffectFree                                                            // Move from special purpose register to gpr
mftexasr  mftexasr  7c0222a6 SyncSideEffectFree                                                            // Move from transaction exception and summary register to gpr
mftexasru mftexasru 7c0322a6 SyncSideEffectFree                                                            // Move from upper 32 bits of transaction exception and summary register to gpr
mftgpr    mftgpr    7c0005be DoubleFP,SingleFP,AltFormat,SyncSideEffectFree                                // Move Floating-Point To GPR
!mfvsrld   mfvsrld   7c000266 AltFormatx,SyncSideEffectFree                                                 // Move from VSR lower Dword
modud     modud     7c000212 SyncSideEffectFree                                                            // Modulo unsigned DWord
modsd     modsd     7c000612 SyncSideEffectFree                                                            // Modulo signed DWord
moduw     moduw     7c000216 SyncSideEffectFree                                                            // Modulo unsigned word
modsw     modsw     7c000616 SyncSideEffectFree                                                            // Modulo signed word
mr        ori       60000000 AltFormatx,IsRegCopy,SyncSideEffectFree                                       // Register copy
!msgsync   msgsync   7c0006ec IsSync                                                                        // Message synchronize
mtcrf     mtcrf     7c000120 SyncSideEffectFree                                                            // Move to condition register fields from gpr
mtctr     mtctr     7c0903a6 AltFormat,SetsCtr,SyncSideEffectFree                                          // Move to count register from gpr
mtfsb0    mtfsb0    fc00008c SetsFPSCR,SyncSideEffectFree                                                  // Move to FPSCR bit 0
mtfsb1    mtfsb1    fc00004c SetsFPSCR,SyncSideEffectFree                                                  // Move to FPSCR bit 1
mtfsfl    mtfsf     fe00058e AltFormatx,HasRecordForm,SetsFPSCR,SyncSideEffectFree                         // Move to FPSCR fields L=1
mtfsf     mtfsf     fc00058e AltFormatx,HasRecordForm,SetsFPSCR,SyncSideEffectFree                         // Move to FPSCR fields L=0/W=0
mtfsfw    mtfsf     fc01058e AltFormatx,HasRecordForm,SetsFPSCR,SyncSideEffectFree                         // Move to FPSCR fields L=0/W=1
mtfsfi    mtfsfi    fc00010c AltFormatx,HasRecordForm,SetsFPSCR,SyncSideEffectFree                         // Move to FPSCR field immediate
mtlr      mtlr      7c0803a6 AltFormat,SyncSideEffectFree                                                  // Move to link register from gpr
mtmsr     mtmsr     7c000124 SyncSideEffectFree                                                            // Move to machine state register
mtspr     mtspr     7c0003a6 SyncSideEffectFree                                                            // Move to special purpose register
mfvsrd    mfvsrd    7c000066 IsVSX,AltFormatx,SyncSideEffectFree                                           // Move From VSR Doubleword
mfvsrwz   mfvsrwz   7c0000e6 IsVSX,AltFormatx,SyncSideEffectFree                                           // Move From VSR Word and Zero
mtvsrd    mtvsrd    7c000166 IsVSX,SyncSideEffectFree                                                      // Move To VSR Doubleword
mtvsrwz   mtvsrwz   7c0001e6 IsVSX,SyncSideEffectFree                                                      // Move To VSR Word and Zero
mtvsrwa   mtvsrwa   7c0001a6 IsVSX,SyncSideEffectFree                                                      // Move To VSR Word and Zero Sign-Extend
!mtvsrdd   mtvsrdd   7c000366 SyncSideEffectFree                                                            // Move to VSR double Dword
!mtvsrws   mtvsrws   7c000326 SyncSideEffectFree                                                            // Move to VSR word & wplat
mulhd     mulhd     7c000092 HasRecordForm,DWord,SyncSideEffectFree                                        // Multiply high dword
mulhdu    mulhdu    7c000012 HasRecordForm,DWord,SyncSideEffectFree                                        // Multiply high dword unsigned
mulhw     mulhw     7c000096 HasRecordForm,SyncSideEffectFree                                              // Multiply high word
mulhwu    mulhwu    7c000016 HasRecordForm,SyncSideEffectFree                                              // Multiply high word unsigned
mulld     mulld     7c0001d2 HasRecordForm,DWord,SyncSideEffectFree                                        // Multiply low dword
mulldo    mulldo    7c0005d2 HasRecordForm,DWord,SyncSideEffectFree                                        // Multiply low dword setting overflow
mulli     mulli     1c000000 SyncSideEffectFree                                                            // Multiply low immediate
mullw     mullw     7c0001d6 HasRecordForm,SyncSideEffectFree                                              // Multiply low word
mullwo    mullwo    7c0005d6 HasRecordForm,SyncSideEffectFree                                              // Multiply low word setting overflow
nand      nand      7c0003b8 HasRecordForm,AltFormatx,SyncSideEffectFree                                   // NAND
neg       neg       7c0000d0 HasRecordForm,SyncSideEffectFree                                              // Negate
nego      nego      7c0004d0 HasRecordForm,SyncSideEffectFree                                              // Negate setting overflow
nor       nor       7c0000f8 HasRecordForm,AltFormatx,SyncSideEffectFree                                   // NOR
or        or        7c000378 HasRecordForm,AltFormatx,SyncSideEffectFree                                   // OR
orc       orc       7c000338 HasRecordForm,AltFormatx,SyncSideEffectFree                                   // OR with complement
ori       ori       60000000 AltFormatx,SyncSideEffectFree                                                 // OR immediate
oris      oris      64000000 AltFormatx,SyncSideEffectFree                                                 // OR immediate shifted
popcntd   popcntd   7c0003f4 AltFormatx,DWord,SyncSideEffectFree                                           // Population count dword
popcntw   popcntw   7c0002f4 AltFormatx,SyncSideEffectFree                                                 // Population count word
rfi       rfi       4c000064                                                                               // Return from interrupt
rldcl     rldcl     78000010 IsRotateOrShift,HasRecordForm,AltFormatx,DWord,SyncSideEffectFree             // Rotate left dword then clear left
rldcr     rldcr     78000012 IsRotateOrShift,HasRecordForm,AltFormatx,DWord,UseMaskEnd,SyncSideEffectFree  // Rotate left dword then clear right
rldic     rldic     78000008 IsRotateOrShift,HasRecordForm,AltFormatx,DWord,SyncSideEffectFree             // Rotate left dword immediate then clear
rldicl    rldicl    78000000 IsRotateOrShift,HasRecordForm,AltFormatx,DWord,SyncSideEffectFree             // Rotate left dword immediate then clear left
rldicr    rldicr    78000004 IsRotateOrShift,HasRecordForm,AltFormatx,DWord,UseMaskEnd,SyncSideEffectFree  // Rotate left dword immediate then clear right
rldimi    rldimi    7800000c IsRotateOrShift,HasRecordForm,AltFormatx,DWord,SyncSideEffectFree,UsesTarget  // Rotate left dword immediate then mask insert
rlwimi    rlwimi    50000000 IsRotateOrShift,HasRecordForm,AltFormatx,SyncSideEffectFree,UsesTarget        // Rotate left word immediate then mask insert
rlwinm    rlwinm    54000000 IsRotateOrShift,HasRecordForm,AltFormatx,SyncSideEffectFree                   // Rotate left word immediate then AND with mask
rlwnm     rlwnm     5c000000 IsRotateOrShift,HasRecordForm,AltFormatx,SyncSideEffectFree                   // Rotate left word then AND with mask
setb      setb      7c000100 SyncSideEffectFree                                                            // Set Boolean
!slbsync   slbsync   7c0002a4 IsSync                                                                        // SLB Synchronize
sld       sld       7c000036 IsRotateOrShift,HasRecordForm,AltFormatx,DWord,SyncSideEffectFree             // Shift left dword
slw       slw       7c000030 IsRotateOrShift,HasRecordForm,AltFormatx,SyncSideEffectFree                   // Shift left word
srad      srad      7c000634 IsRotateOrShift,HasRecordForm,AltFormatx,SetsCarryFlag,DWord,SyncSideEffectFree // Shift right algebraic dword
sradi     sradi     7c000674 IsRotateOrShift,HasRecordForm,AltFormatx,SetsCarryFlag,DWord,SyncSideEffectFree // Shift right algebraic dword immediate
sraw      sraw      7c000630 IsRotateOrShift,HasRecordForm,AltFormatx,SetsCarryFlag,SyncSideEffectFree     // Shift right algebraic word
srawi     srawi     7c000670 IsRotateOrShift,HasRecordForm,AltFormatx,SetsCarryFlag,SyncSideEffectFree     // Shift right algebraic word immediate
srd       srd       7c000436 IsRotateOrShift,HasRecordForm,AltFormatx,DWord,SyncSideEffectFree             // Shift right dword
srw       srw       7c000430 IsRotateOrShift,HasRecordForm,AltFormatx,SyncSideEffectFree                   // Shift right word
stb       stb       98000000 IsStore                                                                       // Store byte
stbu      stbu      9c000000 UpdateForm,IsStore                                                            // Store byte with update
stbux     stbux     7c0001ee UpdateForm,IsStore,AltFormat                                                  // Store byte with update indexed
stbx      stbx      7c0001ae IsStore,AltFormat                                                             // Store byte indexed
std       std       f8000000 IsStore,OffsetRequiresWordAlignment                                           // Store dword
stdcx_r   stdcx.    7c0001ad IsStore,IsRecordForm,AltFormat                                                // Store word conditional indexed
stdu      stdu      f8000001 UpdateForm,IsStore,OffsetRequiresWordAlignment                                // Store dword with update
stdux     stdux     7c00016a UpdateForm,IsStore,AltFormat                                                  // Store dword with update indexed
stdx      stdx      7c00012a IsStore,AltFormat                                                             // Store dword indexed
stfd      stfd      d8000000 DoubleFP,IsStore                                                              // Store float double
stfdp     stfdp     f4000000 DoubleFP,IsStore                                                              // Store float double pair
stfdu     stfdu     dc000000 UpdateForm,DoubleFP,IsStore                                                   // Store float double with update
stfdux    stfdux    7c0005ee UpdateForm,DoubleFP,IsStore,AltFormat                                         // Store float double with update indexed
stfdx     stfdx     7c0005ae DoubleFP,IsStore,AltFormat                                                    // Store float double indexed
stfdpx    stfdpx    7c00072e DoubleFP,IsStore,AltFormat                                                    // Store float double pair indexed
stfiwx    stfiwx    7c0007ae IsStore,AltFormat                                                             // Store float as integer word indexed
stfs      stfs      d0000000 SingleFP,IsStore                                                              // Store float single
stfsu     stfsu     d4000000 UpdateForm,SingleFP,IsStore                                                   // Store float single with update
stfsux    stfsux    7c00056e UpdateForm,SingleFP,IsStore,AltFormat                                         // Store float single with update indexed
stfsx     stfsx     7c00052e SingleFP,IsStore,AltFormat                                                    // Store float single indexed
sth       sth       b0000000 IsStore                                                                       // Store half word
sthbrx    sthbrx    7c00072c IsStore,AltFormat                                                             // Store half word byte reversed indexed
sthu      sthu      b4000000 UpdateForm,IsStore                                                            // Store half word with update
sthux     sthux     7c00036e UpdateForm,IsStore,AltFormat                                                  // Store half word with update indexed
sthx      sthx      7c00032e IsStore,AltFormat                                                             // Store half word indexed
stmw      stmw      bc000000 IsStore                                                                       // Store multiple word
!stop      stop      4c0002e4                                                                               // The thread is placed into power-saving mode and execution is stopped
stswi     stswi     7c0005aa IsStore                                                                       // Store string word immediate
stswx     stswx     7c00052a IsStore,AltFormat                                                             // Store string word indexed
stw       stw       90000000 IsStore                                                                       // Store word
stwbrx    stwbrx    7c00052c IsStore,AltFormat                                                             // Store word byte reverse indexed
stdbrx    stdbrx    7c000528 IsStore,AltFormat                                                             // Store doubleword byte reverse indexed
stwcx_r   stwcx.    7c00012d IsStore,IsRecordForm,AltFormat                                                // Store word conditional indexed
stwu      stwu      94000000 UpdateForm,IsStore                                                            // Store word with update
stwux     stwux     7c00016e UpdateForm,IsStore,AltFormat                                                  // Store word with update indexed
stwx      stwx      7c00012e IsStore,AltFormat                                                             // Store word indexed
subf      subf      7c000050 HasRecordForm,SyncSideEffectFree                                              // Subtract from
subfc     subfc     7c000010 HasRecordForm,SetsCarryFlag,SyncSideEffectFree                                // Subtract from carrying
subfco    subfco    7c000410 HasRecordForm,SetsOverflowFlag,SetsCarryFlag,SyncSideEffectFree               // Subtract from carrying setting overflow
subfe     subfe     7c000110 HasRecordForm,ReadsCarryFlag,SetsCarryFlag,SyncSideEffectFree                 // Subtract from extended
subfeo    subfeo    7c000510 HasRecordForm,SetsOverflowFlag,ReadsCarryFlag,SetsCarryFlag,SyncSideEffectFree// Subtract from extended setting overflow
subfic    subfic    20000000 SetsCarryFlag,SyncSideEffectFree                                              // Subtract from immediate carrying
subfme    subfme    7c0001d0 HasRecordForm,ReadsCarryFlag,SetsCarryFlag,SyncSideEffectFree                 // Subtract from minus one extended
subfmeo   subfmeo   7c0005d0 HasRecordForm,SetsOverflowFlag,ReadsCarryFlag,SetsCarryFlag,SyncSideEffectFree// Subtract from minus one extended setting overflow
subfze    subfze    7c000190 HasRecordForm,ReadsCarryFlag,SetsCarryFlag,SyncSideEffectFree                 // Subtract from zero extended
subfzeo   subfzeo   7c000590 HasRecordForm,SetsOverflowFlag,ReadsCarryFlag,SetsCarryFlag,SyncSideEffectFree// Subtract from zero extended setting overflow
sync      sync      7c0004ac IsSync                                                                        // Synchronize
tabort_r  tabort.   7c00071d TMAbort,IsRecordForm                                                          // Transactional Memory abort
tabortdeq_r   tabortdeq.   7c80065d TMAbort,IsRecordForm,DWord                                             // Transactional Memory abort dword if equal
tabortdeqi_r  tabortdeqi.  7c8006dd TMAbort,IsRecordForm,DWord                                             // Transactional Memory abort dword if equal to immediate value
tabortdge_r   tabortdge.   7d80065d TMAbort,IsRecordForm,DWord                                             // Transactional Memory abort dword if greater than or equal to
tabortdgei_r  tabortdgei.  7d8006dd TMAbort,IsRecordForm,DWord                                             // Transactional Memory abort dword if greater than or equal to immediate
tabortdgt_r   tabortdgt.   7d00065d TMAbort,IsRecordForm,DWord                                             // Transactional Memory abort dword if greater than
tabortdgti_r  tabortdgti.  7d0006dd TMAbort,IsRecordForm,DWord                                             // Transactional Memory abort dword if greater than immediate
tabortdle_r   tabortdle.   7e80065d TMAbort,IsRecordForm,DWord                                             // Transactional Memory abort dword if less than or equal to
tabortdlei_r  tabortdlei.  7e8006dd TMAbort,IsRecordForm,DWord                                             // Transactional Memory abort dword if less than or equal to immediate
tabortdlge_r  tabortdlge.  7ca0065d TMAbort,IsRecordForm,DWord                                             // Transactional Memory abort dword if logically greater than or equal to
tabortdlgei_r tabortdlgei. 7ca006dd TMAbort,IsRecordForm,DWord                                             // Transactional Memory abort dword if logically greater than or equal to immediate
tabortdlgt_r  tabortdlgt.  7c20065d TMAbort,IsRecordForm,DWord                                             // Transactional Memory abort dword if logically greater than
tabortdlgti_r tabortdlgti. 7c2006dd TMAbort,IsRecordForm,DWord                                             // Transactional Memory abort dword if logically greater than immediate
tabortdlle_r  tabortdlle.  7cc0065d TMAbort,IsRecordForm,DWord                                             // Transactional Memory abort dword if logically less than or equal to
tabortdllei_r tabortdllei. 7cc006dd TMAbort,IsRecordForm,DWord                                             // Transactional Memory abort dword if logically less than or equal to immediate
tabortdllt_r  tabortdllt.  7c40065d TMAbort,IsRecordForm,DWord                                             // Transactional Memory abort dword if logically less than
tabortdllti_r tabortdllti. 7c4006dd TMAbort,IsRecordForm,DWord                                             // Transactional Memory abort dword if logically less than immediate
tabortdlt_r   tabortdlt.   7e00065d TMAbort,IsRecordForm,DWord                                             // Transactional Memory abort dword if less than
tabortdlti_r  tabortdlti.  7e0006dd TMAbort,IsRecordForm,DWord                                             // Transactional Memory abort dword if less than immediate
tabortdneq_r  tabortdneq.  7f00065d TMAbort,IsRecordForm,DWord                                             // Transactional Memory abort dword if not equal to
tabortdneqi_r tabortdneqi. 7f0006dd TMAbort,IsRecordForm,DWord                                             // Transactional Memory abort dword if not equal to immediate
tabortweq_r   tabortweq.   7c80065d TMAbort,IsRecordForm                                                   // Transactional Memory abort if equal
tabortweqi_r  tabortweqi.  7c8006dd TMAbort,IsRecordForm                                                   // Transactional Memory abort if equal to immediate value
tabortwge_r   tabortwge.   7d80065d TMAbort,IsRecordForm                                                   // Transactional Memory abort if greater than or equal to
tabortwgei_r  tabortwgei.  7d8006dd TMAbort,IsRecordForm                                                   // Transactional Memory abort if greater than or equal to immediate
tabortwgt_r   tabortwgt.   7d00065d TMAbort,IsRecordForm                                                   // Transactional Memory abort if greater than
tabortwgti_r  tabortwgti.  7d0006dd TMAbort,IsRecordForm                                                   // Transactional Memory abort if greater than immediate
tabortwle_r   tabortwle.   7e80065d TMAbort,IsRecordForm                                                   // Transactional Memory abort if less than or equal to
tabortwlei_r  tabortwlei.  7e8006dd TMAbort,IsRecordForm                                                   // Transactional Memory abort if less than or equal to immediate
tabortwlge_r  tabortwlge.  7ca0065d TMAbort,IsRecordForm                                                   // Transactional Memory abort if logically greater than or equal to
tabortwlgei_r tabortwlgei. 7ca006dd TMAbort,IsRecordForm                                                   // Transactional Memory abort if logically greater than or equal to immediate
tabortwlgt_r  tabortwlgt.  7c20065d TMAbort,IsRecordForm                                                   // Transactional Memory abort if logically greater than
tabortwlgti_r tabortwlgti. 7c2006dd TMAbort,IsRecordForm                                                   // Transactional Memory abort if logically greater than immediate
tabortwlle_r  tabortwlle.  7cc0065d TMAbort,IsRecordForm                                                   // Transactional Memory abort if logically less than or equal to
tabortwllei_r tabortwllei. 7cc006dd TMAbort,IsRecordForm                                                   // Transactional Memory abort if logically less than or equal to immediate
tabortwllt_r  tabortwllt.  7c40065d TMAbort,IsRecordForm                                                   // Transactional Memory abort if logically less than
tabortwllti_r tabortwllti. 7c4006dd TMAbort,IsRecordForm                                                   // Transactional Memory abort if logically less than immediate
tabortwlt_r   tabortwlt.   7e00065d TMAbort,IsRecordForm                                                   // Transactional Memory abort if less than
tabortwlti_r  tabortwlti.  7e0006dd TMAbort,IsRecordForm                                                   // Transactional Memory abort if less than immediate
tabortwneq_r  tabortwneq.  7f00065d TMAbort,IsRecordForm                                                   // Transactional Memory abort if not equal to
tabortwneqi_r tabortwneqi. 7f0006dd TMAbort,IsRecordForm                                                   // Transactional Memory abort if not equal to immediate
tbegin_r      tbegin.      7c00051d IsRecordForm                                                           // Begin transaction
tbeginro_r    tbeginro.    7c20051d IsRecordForm                                                           // Begin roll-back only transaction
tend_r        tend.        7c00055d IsRecordForm                                                           // End transaction (supports nesting)
tendall_r     tendall.     7e00055d IsRecordForm                                                           // End transaction
tdeq      tdeq      7c800088 Trap,DWord                                                                    // Trap dword if equal
tdeqi     tdeqi     08800000 Trap,DWord                                                                    // Trap dword if equal to immediate value
tdge      tdge      7d800088 Trap,DWord                                                                    // Trap dword if greater than or equal to
tdgei     tdgei     09800000 Trap,DWord                                                                    // Trap dword if greater than or equal to immediate value
tdgt      tdgt      7d000088 Trap,DWord                                                                    // Trap dword if greater than
tdgti     tdgti     09000000 Trap,DWord                                                                    // Trap dword if greater than immediate value
tdle      tdle      7e800088 Trap,DWord                                                                    // Trap dword if less than or equal to
tdlei     tdlei     0a800000 Trap,DWord                                                                    // Trap dword if less than or equal to immediate value
tdlge     tdlge     7ca00088 Trap,DWord                                                                    // Trap dword if logically greater than or equal to
tdlgei    tdlgei    08a00000 Trap,DWord                                                                    // Trap dword if logically greater than or equal to immediate value
tdlgt     tdlgt     7c200088 Trap,DWord                                                                    // Trap dword if logically greater than
tdlgti    tdlgti    08200000 Trap,DWord                                                                    // Trap dword if logically greater than immediate value
tdlle     tdlle     7cc00088 Trap,DWord                                                                    // Trap dword if logically less than or equal to
tdllei    tdllei    08c00000 Trap,DWord                                                                    // Trap dword if logically less than or equal to immediate value
tdllt     tdllt     7c400088 Trap,DWord                                                                    // Trap dword if logically less than
tdllti    tdllti    08400000 Trap,DWord                                                                    // Trap dword if logically less than immediate value
tdlt      tdlt      7e000088 Trap,DWord                                                                    // Trap dword if less than
tdlti     tdlti     0a000000 Trap,DWord                                                                    // Trap dword if less than immediate value
tdneq     tdneq     7f000088 Trap,DWord                                                                    // Trap dword if not equal
tdneqi    tdneqi    0b000000 Trap,DWord                                                                    // Trap dword if not equal to immediate value
trap      trap      7fe00008 Trap                                                                          // Unconditional trap
tweq      tweq      7c800008 Trap                                                                          // Trap word if equal
tweqi     tweqi     0c800000 Trap                                                                          // Trap word if equal to immediate value
twge      twge      7d800008 Trap                                                                          // Trap word if greater than or equal to
twgei     twgei     0d800000 Trap                                                                          // Trap word if greater than or equal to immediate value
twgt      twgt      7d000008 Trap                                                                          // Trap word if greater than
twgti     twgti     0d000000 Trap                                                                          // Trap word if greater than immediate value
twle      twle      7e800008 Trap                                                                          // Trap word if less than or equal to
twlei     twlei     0e800000 Trap                                                                          // Trap word if less than or equal to immediate value
twlge     twlge     7ca00008 Trap                                                                          // Trap word if logically greater than or equal to
twlgei    twlgei    0ca00000 Trap                                                                          // Trap word if logically greater than or equal to immediate value
twlgt     twlgt     7c200008 Trap                                                                          // Trap word if logically greater than
twlgti    twlgti    0c200000 Trap                                                                          // Trap word if logically greater than immediate value
twlle     twlle     7cc00008 Trap                                                                          // Trap word if logically less than or equal to
twllei    twllei    0cc00000 Trap                                                                          // Trap word if logically less than or equal to immediate value
twllt     twllt     7c400008 Trap                                                                          // Trap word if logically less than
twllti    twllti    0c400000 Trap                                                                          // Trap word if logically less than immediate value
twlt      twlt      7e000008 Trap                                                                          // Trap word if less than
twlti     twlti     0e000000 Trap                                                                          // Trap word if less than immediate value
twneq     twneq     7f000008 Trap                                                                          // Trap word if not equal
twneqi    twneqi    0f000000 Trap                                                                          // Trap word if not equal to immediate value
xor       xor       7c000278 HasRecordForm,AltFormatx,SyncSideEffectFree                                   // XOR
!xor3      xor3      10000036 AltFormatx,SyncSideEffectFree                                                 // XOR 3-way
xori      xori      68000000 AltFormatx,SyncSideEffectFree                                                 // XOR immediate
xoris     xoris     6c000000 AltFormatx,SyncSideEffectFree                                                 // XOR immediate shifted
nop       nop       60000000 SyncSideEffectFree                                                            // NoOp (ori)
genop     nop       60000000 SyncSideEffectFree                                                            // Group Ending NoOp (ori)
fence     fence     00000000 SyncSideEffectFree                                                            // Fence
shdfence shdfence   00000000 SyncSideEffectFree                                                            // Scheduling Fence
ret       ret       00000000                                                                               // Return
!rxor      rxor      7c0002f8 AltFormatx,SyncSideEffectFree                                                 // Rotate & XOR
wrtbar    wrtbar    00000000                                                                               // Write barrier directive
proc      proc      00000000                                                                               // Entry to the method
dd        .long     00000000                                                                               // define word
assocreg  assocreg  00000000 SyncSideEffectFree                                                            // Associate real registers with Virtual registers.
vgdnop    vgdnop    00000000                                                                               // Virtual Guard NOP instruction
depend    depend    00000000                                                                               // Instruction to hang dependency on
probenop  nop       7c000038 SyncSideEffectFree                                                            // Probe NOP (for RI)
! The following entries are placeholders for instruction sequences that add control flow.  When using a register
! allocator that cannot handle registers being alive across a basic block boundary use these until after registers
! have been allocated.
iflong    iflong    00000000 BranchOp                                                                      // compare and branch long
setblong  setblong  00000000                                                                               // compare long and set boolean
setbool   setbool   00000000                                                                               // compare and set boolean (int or simple float)
setbflt   setbflt   00000000                                                                               // compare float and set boolean (complex float)
lcmp      lcmp      00000000                                                                               // compare long and set result -1,0,1
flcmpl    flcmpl    00000000                                                                               // compare float and set result -1(less,unordered),0(equal),1(greater)
flcmpg    flcmpg    00000000                                                                               // compare float and set result -1(less),0(equal),1(greater,unordered)
idiv      idiv      00000000                                                                               // integer divide
ldiv      ldiv      00000000                                                                               // long divide for 64 bit target
irem      irem      00000000                                                                               // integer remainder
lrem      lrem      00000000                                                                               // long remainder for 64 bit target
cdnan     cdnan     00000000                                                                               // canonise double NaN to 0x7ff80..0 (in gprs)
cfnan     cfnan     00000000                                                                               // canonise float  NaN to 0x7fc00..0 (in gprs)
d2i       d2i       00000000                                                                               // converts from double to integer
d2l       d2l       00000000                                                                               // converts from double to long
ifx       ifx       00000000 BranchOp                                                                      // compare and branch complex
setbx     setbx     00000000                                                                               // compare complex and set boolean
iternary  iternary  00000000                                                                               // ternary evaluator
! instructions for exploiting VMX
!bcdcpsgn_r  bcdcpsgn.  10000341 IsVMX,IsRecordForm,SyncSideEffectFree                                        // Decimal copySign & record
!bcdcfn_r    bcdcfn.    10070581 IsVMX,IsRecordForm,SyncSideEffectFree,AltFormat                              // Decimal convert from national & record
!bcdcfsq_r   bcdcfsq.   10020581 IsVMX,IsRecordForm,SyncSideEffectFree,AltFormat                              // Decimal convert from signed qword & record
!bcdcfz_r    bcdcfz.    10060581 IsVMX,IsRecordForm,SyncSideEffectFree,AltFormat                              // Decimal convert from zoned & record
!bcdctn_r    bcdctn.    10050581 IsVMX,IsRecordForm,SyncSideEffectFree,AltFormat                              // Decimal convert to national & record
!bcdctsq_r   bcdctsq.   10000581 IsVMX,IsRecordForm,SyncSideEffectFree,AltFormat                              // Decimal convert to signed qword & record
!bcdctz_r    bcdctz.    10040581 IsVMX,IsRecordForm,SyncSideEffectFree,AltFormat                              // Decimal convert to zoned & record
!bcds_r      bcds.      100004c1 IsVMX,IsRecordForm,SyncSideEffectFree                                        // Decimal shift & record
!bcdsetsgn_r bcdsetsgn. 101f0581 IsVMX,IsRecordForm,SyncSideEffectFree,AltFormat                              // Decimal set Sign & record
!bcdsr_r     bcdsr.     100005c1 IsVMX,IsRecordForm,SyncSideEffectFree                                        // Decimal shift & round & record
!bcdtrunc_r  bcdtrunc.  10000501 IsVMX,IsRecordForm,SyncSideEffectFree                                        // Decimal truncate & record
!bcdus_r     bcdus.     10000481 IsVMX,IsRecordForm,SyncSideEffectFree                                        // Decimal unsigned shift & record
!bcdutrunc_r bcdutrunc. 10000541 IsVMX,IsRecordForm,SyncSideEffectFree                                        // Decimal unsigned truncate & record
lvsl       lvsl       7c00000c IsLoad,IsVMX                                                                  // Load vector for shift left
lvsr       lvsr       7c00004c IsLoad,IsVMX                                                                  // Load vector for shift right
lvx        lvx        7c0000ce IsLoad,IsVMX                                                                  // Load vector indexed
lvebx      lvebx      7c00000e IsLoad,IsVMX                                                                  // Load vector element byte indexed
lvehx      lvehx      7c00004e IsLoad,IsVMX                                                                  // Load vector element halfword indexed
lvewx      lvewx      7c00008e IsLoad,IsVMX                                                                  // Load vector element word indexed
!mtvscr     mtvscr     10000644 IsVMX,SyncSideEffectFree,AltFormatx                                           // Move To VSCR
!mfvscr     mfvscr     10000604 IsVMX,SyncSideEffectFree                                                      // Move From VSCR
stvx       stvx       7c0001ce IsStore,IsVMX                                                                 // store vector indexed
stvebx     stvebx     7c00010e IsStore,IsVMX                                                                 // store vector element byte indexed
stvehx     stvehx     7c00014e IsStore,IsVMX                                                                 // store vector element halfword indexed
stvewx     stvewx     7c00018e IsStore,IsVMX                                                                 // store vector element word indexed
!vabsdub    vabsdub    10000403 IsVMX,SyncSideEffectFree                                                      // vector absolute difference unsigned byte
!vabsduh    vabsduh    10000443 IsVMX,SyncSideEffectFree                                                      // vector absolute difference unsigned hword
!vabsduw    vabsduw    10000483 IsVMX,SyncSideEffectFree                                                      // vector absolute difference unsigned word
vand       vand       10000404 IsVMX,SyncSideEffectFree                                                      // vector logical and
vandc      vandc      10000444 IsVMX,SyncSideEffectFree                                                      // vector logical and with complement
!vclzlsbb   vclzlsbb   10000602 IsVMX,SyncSideEffectFree,AltFormat                                            // vector count leading zero least-significant bits byte
!vctzlsbb   vctzlsbb   10010602 IsVMX,SyncSideEffectFree,AltFormat                                            // vector count trailing zero least-significant bits byte
!vctzb      vctzb      101c0602 IsVMX,SyncSideEffectFree,AltFormat                                            // vector count trailing zeros Byte
!vctzh      vctzh      101d0602 IsVMX,SyncSideEffectFree,AltFormat                                            // vector count trailing zeros Hword
!vctzw      vctzw      101e0602 IsVMX,SyncSideEffectFree,AltFormat                                            // vector count trailing zeros Word
!vctzd      vctzd      101f0602 IsVMX,SyncSideEffectFree,AltFormat                                            // vector count trailing zeros Dword
!vextractub vextractub 1000020d IsVMX,SyncSideEffectFree,AltFormat                                            // vector extract unsigned Byte
!vextractuh vextractuh 1000024d IsVMX,SyncSideEffectFree,AltFormat                                            // vector extract unsigned Hword
!vextractuw vextractuw 1000028d IsVMX,SyncSideEffectFree,AltFormat                                            // vector extract unsigned Word
!vextractd  vextractd  100002cd IsVMX,SyncSideEffectFree,AltFormat                                            // vector extract Dword
!vextsb2w   vextsb2w   10100602 IsVMX,SyncSideEffectFree,AltFormat                                            // vector extend sign byte to Word
!vextsh2w   vextsh2w   10110602 IsVMX,SyncSideEffectFree,AltFormat                                            // vector extend sign hword to Word
!vextsb2d   vextsb2d   10180602 IsVMX,SyncSideEffectFree,AltFormat                                            // vector extend sign byte to Dword
!vextsh2d   vextsh2d   10190602 IsVMX,SyncSideEffectFree,AltFormat                                            // vector extend sign hword to Dword
!vextsw2d   vextsw2d   101a0602 IsVMX,SyncSideEffectFree,AltFormat                                            // vector extend sign word to Dword
!vextublx   vextublx   1000060d IsVMX,SyncSideEffectFree                                                      // vector extract unsigned byte left-indexed
!vextuhlx   vextuhlx   1000064d IsVMX,SyncSideEffectFree                                                      // vector extract unsigned hword left-indexed
!vextuwlx   vextuwlx   1000068d IsVMX,SyncSideEffectFree                                                      // vector extract unsigned word left-indexed
!vextubrx   vextubrx   1000070d IsVMX,SyncSideEffectFree                                                      // vector extract unsigned byte right-indexed
!vextuhrx   vextuhrx   1000074d IsVMX,SyncSideEffectFree                                                      // vector extract unsigned hword right-indexed
!vextuwrx   vextuwrx   1000078d IsVMX,SyncSideEffectFree                                                      // vector extract unsigned word right-indexed
!vgbbd       vgbbd      1000050c IsVMX,SyncSideEffectFree,AltFormat                                           // Vector Gather Bits by Byte by Dword
!vinsertb   vinsertb   1000030d IsVMX,SyncSideEffectFree,AltFormat                                            // vector insert Byte
!vinserth   vinserth   1000034d IsVMX,SyncSideEffectFree,AltFormat                                            // vector insert Hword
!vinsertw   vinsertw   1000038d IsVMX,SyncSideEffectFree,AltFormat                                            // vector insert Word
!vinsertd   vinsertd   100003cd IsVMX,SyncSideEffectFree,AltFormat                                            // vector insert Dword
!vmaxud      vmaxud     100000c2 IsVMX,SyncSideEffectFree                                                     // Vector Maximum Unsigned Dword
!vminsd      vminsd     100003c2 IsVMX,SyncSideEffectFree                                                     // Vector Minimum Signed Dword
!vmul10cuq  vmul10cuq  10000001 IsVMX,SyncSideEffectFree,SetsCarryFlag                                        // vector multiply-by-10 & write carry unsigned qword
!vmul10ecuq vmul10ecuq 10000041 IsVMX,SyncSideEffectFree,SetsCarryFlag                                        // vector multiply-by-10 extended & write carry unsigned qword
!vmul10uq   vmul10uq   10000201 IsVMX,SyncSideEffectFree                                                      // vector multiply-by-10 unsigned qword
!vmul10euq  vmul10euq  10000241 IsVMX,SyncSideEffectFree                                                      // vector multiply-by-10 extended unsigned qword
!vmulesw     vmulesw    10000388 IsVMX,SyncSideEffectFree                                                     // Vector Multiply Even Signed Word
!vmuleuw     vmuleuw    10000288 IsVMX,SyncSideEffectFree                                                     // Vector Multiply Even Unsigned Word
!vmulosw     vmulosw    10000188 IsVMX,SyncSideEffectFree                                                     // Vector Multiply Odd Signed Word
!vmulouw     vmulouw    10000088 IsVMX,SyncSideEffectFree                                                     // Vector Multiply Odd Unsigned Word
!vnegw      vnegw      10060602 IsVMX,SyncSideEffectFree,AltFormat                                            // vector negate word
!vnegd      vnegd      10070602 IsVMX,SyncSideEffectFree,AltFormat                                            // vector negate DWord
!vprtybw    vprtybw    10080602 IsVMX,SyncSideEffectFree,AltFormat                                            // vector parity byte word
!vprtybd    vprtybd    10090602 IsVMX,SyncSideEffectFree,AltFormat                                            // vector parity byte DWord
!vprtybq    vprtybq    100a0602 IsVMX,SyncSideEffectFree,AltFormat                                            // vector parity byte qword
!vmr        vor        10000484 IsVMX,IsRegCopy                                                              // vector move register
vor        vor        10000484 IsVMX,SyncSideEffectFree                                                      // vector or
!vorc       vorc       10000544 IsVMX,SyncSideEffectFree                                                      // Vector Logical OR with Complement
vxor       vxor       100004C4 IsVMX,SyncSideEffectFree                                                      // vector xor
!vnand      vnand      10000584 IsVMX,SyncSideEffectFree                                                      // Vector Logical NAND
!vncipher   vncipher   10000548 IsVMX,SyncSideEffectFree                                                      // Vector AES Inverse Cipher
!vncipherlast vncipherlast 10000549 IsVMX,SyncSideEffectFree                                                  // Vector AES Inverse Cipher Last
vnor       vnor       10000504 IsVMX,SyncSideEffectFree                                                      // vector nor
vperm      vperm      1000002B IsVMX,SyncSideEffectFree                                                      // vector permute
!vpermr     vpermr     1000003b IsVMX,SyncSideEffectFree                                                      // vector permute right-indexed
!vbpermd    vbpermd    100005cc IsVMX,SyncSideEffectFree                                                      // vector bit permute DWord
vbpermq    vbpermq    1000054c IsVMX,SyncSideEffectFree                                                      // Vector Bit Permute Qword
!vrld       vrld       100000c4 IsRotateOrShift,IsVMX,SyncSideEffectFree                                      // Vector Rotate Left Dword
!vsbox      vsbox      100005c8 IsVMX,SyncSideEffectFree                                                      // Vector AES SubBytes
vsel       vsel       1000002A IsVMX,SyncSideEffectFree                                                      // vector conditional select
!vsld       vsld       100005c4 IsRotateOrShift,IsVMX,SyncSideEffectFree                                      // Vector Shift Left Dword
!vsrad      vsrad      100003c4 IsRotateOrShift,IsVMX,SyncSideEffectFree                                      // Vector Shift Right Algebraic Dword
!vsrd       vsrd       100006c4 IsRotateOrShift,IsVMX,SyncSideEffectFree                                      // Vector Shift Right Dword
!vsubcuq    vsubcuq    10000540 IsVMX,SyncSideEffectFree,SetsCarryFlag                                        // Vector Subtract & write Carry Unsigned Qword
!vsubecuq   vsubecuq   1000003f IsVMX,SyncSideEffectFree,SetsCarryFlag                                        // Vector Subtract Extended & write Carry Unsigned Qword
!vsubeuqm   vsubeuqm   1000003e IsVMX,SyncSideEffectFree                                                      // Vector Subtract Extended Unsigned Qword Modulo
!vsubuqm    vsubuqm    10000500 IsVMX,SyncSideEffectFree                                                      // Vector Subtract Unsigned Qword Modulo
vsumsws    vsumsws    10000788 IsVMX,SyncSideEffectFree                                                      // vector sum across signed word saturate
vsum2sws   vsum2sws   10000688 IsVMX,SyncSideEffectFree                                                      // vector sum across partial signed word saturate
vsum4sbs   vsum4sbs   10000708 IsVMX,SyncSideEffectFree                                                      // vector sum across partial signed byte saturate
vsum4shs   vsum4shs   10000648 IsVMX,SyncSideEffectFree                                                      // vector sum across partial signed halfword saturate
vsum4ubs   vsum4ubs   10000608 IsVMX,SyncSideEffectFree                                                      // vector sum across partial unsigned byte saturate
vspltb     vspltb     1000020C IsVMX,SyncSideEffectFree,AltFormat                                            // vector splat byte
vsplth     vsplth     1000024C IsVMX,SyncSideEffectFree,AltFormat                                            // vector splat halfword
vspltw     vspltw     1000028C IsVMX,SyncSideEffectFree,AltFormat                                            // vector splat word
vspltisb   vspltisb   1000030C IsVMX,SyncSideEffectFree                                                      // vector splat immediate signed byte
vspltish   vspltish   1000034C IsVMX,SyncSideEffectFree                                                      // vector splat immediate signed halfword
vspltisw   vspltisw   1000038C IsVMX,SyncSideEffectFree                                                      // vector splat immediate signed word
vsl        vsl        100001C4 IsRotateOrShift,IsVMX,SyncSideEffectFree                                      // vector shift left
vslb       vslb       10000104 IsRotateOrShift,IsVMX,SyncSideEffectFree                                      // vector shift left byte
vsldoi     vsldoi     1000002C IsRotateOrShift,IsVMX,SyncSideEffectFree                                      // vector shift left double by octet immediate
vslh       vslh       10000144 IsRotateOrShift,IsVMX,SyncSideEffectFree                                      // vector shift left halfword
vslo       vslo       1000040C IsRotateOrShift,IsVMX,SyncSideEffectFree                                      // vector shift left by octet
vslw       vslw       10000184 IsRotateOrShift,IsVMX,SyncSideEffectFree                                      // vector shift left word
vsr        vsr        100002C4 IsRotateOrShift,IsVMX,SyncSideEffectFree                                      // vector shift right
vsrab      vsrab      10000304 IsRotateOrShift,IsVMX,SyncSideEffectFree                                      // vector shift right algebraic byte
vsrah      vsrah      10000344 IsRotateOrShift,IsVMX,SyncSideEffectFree                                      // vector shift right algebraic halfword
vsraw      vsraw      10000384 IsRotateOrShift,IsVMX,SyncSideEffectFree                                      // vector shift right algebraic word
vsrb       vsrb       10000204 IsRotateOrShift,IsVMX,SyncSideEffectFree                                      // vector shift right byte
vsrh       vsrh       10000244 IsRotateOrShift,IsVMX,SyncSideEffectFree                                      // vector shift right halfword
vsro       vsro       1000044C IsRotateOrShift,IsVMX,SyncSideEffectFree                                      // vector shift right by octet
vsrw       vsrw       10000284 IsRotateOrShift,IsVMX,SyncSideEffectFree                                      // vector shift right word
!vsrv       vsrv       10000704 IsRotateOrShift,IsVMX,SyncSideEffectFree                                      // vector shift right variable
!vslv       vslv       10000744 IsRotateOrShift,IsVMX,SyncSideEffectFree                                      // vector shift left variable
vrlb       vrlb       10000004 IsRotateOrShift,IsVMX,SyncSideEffectFree                                      // vector rotate left byte
vrlh       vrlh       10000044 IsRotateOrShift,IsVMX,SyncSideEffectFree                                      // vector rotate left halfword
vrlw       vrlw       10000084 IsRotateOrShift,IsVMX,SyncSideEffectFree                                      // vector rotate left word
!vrlwmi     vrlwmi     10000085 IsRotateOrShift,IsVMX,SyncSideEffectFree                                      // vector rotate left word then mask insert
!vrldmi     vrldmi     100000c5 IsRotateOrShift,IsVMX,SyncSideEffectFree                                      // vector rotate left DWord then mask insert
!vrlwnm     vrlwnm     10000185 IsRotateOrShift,IsVMX,SyncSideEffectFree                                      // vector rotate left word then and with mask
!vrldnm     vrldnm     100001c5 IsRotateOrShift,IsVMX,SyncSideEffectFree                                      // vector rotate left DWord then and with mask
!vaddcuw    vaddcuw    10000180 IsVMX,SyncSideEffectFree,SetsCarryFlag                                        // Vector Add & Write Carry-Out Unsigned Word
!vaddcuq    vaddcuq    10000140 IsVMX,SyncSideEffectFree,SetsCarryFlag                                        // Vector Add & write Carry Unsigned Qword
!vaddecuq   vaddecuq   1000003d IsVMX,SyncSideEffectFree,SetsCarryFlag                                        // Vector Add Extended & write Carry Unsigned Qword
!vaddeuqm   vaddeuqm   1000003c IsVMX,SyncSideEffectFree                                                      // Vector Add Extended Unsigned Qword Modulo
vaddsbs    vaddsbs    10000300 IsVMX,SyncSideEffectFree                                                      // vector add signed byte saturate
vaddshs    vaddshs    10000340 IsVMX,SyncSideEffectFree                                                      // vector add signed halfword saturate
vaddsws    vaddsws    10000380 IsVMX,SyncSideEffectFree                                                      // vector add signed word saturate
vaddubm    vaddubm    10000000 IsVMX,SyncSideEffectFree                                                      // vector add unsigned byte modulo
vaddubs    vaddubs    10000200 IsVMX,SyncSideEffectFree                                                      // vector add unsigned byte saturate
vaddudm    vaddudm    100000c0 IsVMX,SyncSideEffectFree                                                      // Vector Add Unsigned Dword Modulo
vadduhm    vadduhm    10000040 IsVMX,SyncSideEffectFree                                                      // vector add unsigned halfword modulo
vadduhs    vadduhs    10000240 IsVMX,SyncSideEffectFree                                                      // vector add unsigned halfword saturate
vadduwm    vadduwm    10000080 IsVMX,SyncSideEffectFree                                                      // vector add unsigned word modulo
vadduws    vadduws    10000280 IsVMX,SyncSideEffectFree                                                      // vector add unsigned word saturate
!vadduqm    vadduqm    10000100 IsVMX,SyncSideEffectFree                                                      // Vector Add Unsigned Qword Modulo
!vavgsb     vavgsb     10000502 IsVMX,SyncSideEffectFree                                                      // Vector Average Signed Byte
!vavgsh     vavgsh     10000542 IsVMX,SyncSideEffectFree                                                      // Vector Average Signed Hword
!vavgsw     vavgsw     10000582 IsVMX,SyncSideEffectFree                                                      // Vector Average Signed Word
!vavgub     vavgub     10000402 IsVMX,SyncSideEffectFree                                                      // Vector Average Unsigned Byte
!vavguh     vavguh     10000442 IsVMX,SyncSideEffectFree                                                      // Vector Average Unsigned Hword
!vavguw     vavguw     10000482 IsVMX,SyncSideEffectFree                                                      // Vector Average Unsigned Word
!vsubcuw    vsubcuw    10000580 IsVMX,SyncSideEffectFree,SetsCarryFlag                                        // Vector Subtract & Write Carry-Out Unsigned Word
vsubsbs    vsubsbs    10000700 IsVMX,SyncSideEffectFree                                                      // vector subtract signed byte saturate
vsubshs    vsubshs    10000740 IsVMX,SyncSideEffectFree                                                      // vector subtract signed halfword saturate
vsubsws    vsubsws    10000780 IsVMX,SyncSideEffectFree                                                      // vector subtract signed word saturate
vsububm    vsububm    10000400 IsVMX,SyncSideEffectFree                                                      // vector subtract unsigned byte modulo
vsububs    vsububs    10000600 IsVMX,SyncSideEffectFree                                                      // vector subtract unsigned byte saturate
vsubudm    vsubudm    100004C0 IsVMX,SyncSideEffectFree                                                      // vector subtract unsigned Dword modulo
vsubuhm    vsubuhm    10000440 IsVMX,SyncSideEffectFree                                                      // vector subtract unsigned halfword modulo
vsubuhs    vsubuhs    10000640 IsVMX,SyncSideEffectFree                                                      // vector subtract unsigned halfword saturate
vsubuwm    vsubuwm    10000480 IsVMX,SyncSideEffectFree                                                      // vector subtract unsigned word modulo
vsubuws    vsubuws    10000680 IsVMX,SyncSideEffectFree                                                      // vector subtract unsigned word saturate
!vmhaddshs  vmhaddshs  10000020 IsVMX,SyncSideEffectFree                                                      // Vector Multiply-High-Add Signed Hword Saturate
!vmhraddshs vmhraddshs 10000021 IsVMX,SyncSideEffectFree                                                      // Vector Multiply-High-Round-Add Signed Hword Saturate
!vmladduhm  vmladduhm  10000022 IsVMX,SyncSideEffectFree                                                      // Vector Multiply-Low-Add Unsigned Hword Modulo
!vmsummbm   vmsummbm   10000025 IsVMX,SyncSideEffectFree                                                      // Vector Multiply-Sum Mixed Byte Modulo
!vmsumshm   vmsumshm   10000028 IsVMX,SyncSideEffectFree                                                      // Vector Multiply-Sum Signed Hword Modulo
!vmsumshs   vmsumshs   10000029 IsVMX,SyncSideEffectFree                                                      // Vector Multiply-Sum Signed Hword Saturate
!vmsumubm   vmsumubm   10000024 IsVMX,SyncSideEffectFree                                                      // Vector Multiply-Sum Unsigned Byte Modulo
!vmsumuhs   vmsumuhs   10000027 IsVMX,SyncSideEffectFree                                                      // Vector Multiply-Sum Unsigned Hword Saturate
!vmulesb    vmulesb    10000308 IsVMX,SyncSideEffectFree                                                      // Vector Multiply Even Signed Byte
!vmuleub    vmuleub    10000208 IsVMX,SyncSideEffectFree                                                      // Vector Multiply Even Unsigned Byte
!vmuleuh    vmuleuh    10000248 IsVMX,SyncSideEffectFree                                                      // Vector Multiply Even Unsigned Hword
!vmulosb    vmulosb    10000108 IsVMX,SyncSideEffectFree                                                      // Vector Multiply Odd Signed Byte
!vmuloub    vmuloub    10000008 IsVMX,SyncSideEffectFree                                                      // Vector Multiply Odd Unsigned Byte
vmulesh    vmulesh    10000348 IsVMX,SyncSideEffectFree                                                      // vector multiply even signed halfword
vmulosh    vmulosh    10000148 IsVMX,SyncSideEffectFree                                                      // vector multiply odd signed halfword
vmulouh    vmulouh    10000048 IsVMX,SyncSideEffectFree                                                      // vector multiply odd unsigned halfword
vmuluwm    vmuluwm    10000089 IsVMX,SyncSideEffectFree                                                      // vector multiply unsigned word modulo
vminsb     vminsb     10000302 IsVMX,SyncSideEffectFree                                                      // vector minimum signed byte
vminsh     vminsh     10000342 IsVMX,SyncSideEffectFree                                                      // vector minimum signed halfword
vminsw     vminsw     10000382 IsVMX,SyncSideEffectFree                                                      // vector minimum signed word
vminub     vminub     10000202 IsVMX,SyncSideEffectFree                                                      // vector minimum unsigned byte
vminuh     vminuh     10000242 IsVMX,SyncSideEffectFree                                                      // vector minimum unsigned halfword
vminuw     vminuw     10000282 IsVMX,SyncSideEffectFree                                                      // vector minimum unsigned word
vmaxsb     vmaxsb     10000002 IsVMX,SyncSideEffectFree                                                      // vector maximum signed byte
vmaxsh     vmaxsh     10000042 IsVMX,SyncSideEffectFree                                                      // vector maximum signed halfword
vmaxsw     vmaxsw     10000082 IsVMX,SyncSideEffectFree                                                      // vector maximum signed word
vmaxub     vmaxub     10000102 IsVMX,SyncSideEffectFree                                                      // vector maximum unsigned byte
vmaxuh     vmaxuh     10000142 IsVMX,SyncSideEffectFree                                                      // vector maximum unsigned halfword
vmaxuw     vmaxuw     10000182 IsVMX,SyncSideEffectFree                                                      // vector maximum unsigned word
!vmsumudm   vmsumudm   7c000154 IsVMX,SyncSideEffectFree                                                      // Vector Multiply-Sum Unsigned Dword
vmsumuhm   vmsumuhm   10000026 IsVMX,SyncSideEffectFree                                                      // vector multiply-sum unsigned halfword word modulo
!vcipher    vcipher    10000508 IsVMX,SyncSideEffectFree                                                      // Vector AES Cipher
!vcipherlast vcipherlast 10000509 IsVMX,SyncSideEffectFree                                                    // Vector AES Cipher Last
!vclzb      vclzb      10000702 IsVMX,SyncSideEffectFree,AltFormat                                            // Vector Count Leading Zeros Byte
!vclzd      vclzd      100007c2 IsVMX,SyncSideEffectFree,AltFormat                                            // Vector Count Leading Zeros Dword
!vclzh      vclzh      10000742 IsVMX,SyncSideEffectFree,AltFormat                                            // Vector Count Leading Zeros Hword
!vclzw      vclzw      10000782 IsVMX,SyncSideEffectFree,AltFormat                                            // Vector Count Leading Zeros Word
!vcmpbfp    vcmpbfp    100003c6 IsVMX,CompareOp,SyncSideEffectFree,HasRecordForm                              // Vector Compare Bounds Floating-Point
!vcmpeqfp   vcmpeqfp   100000c6 IsVMX,CompareOp,SyncSideEffectFree,HasRecordForm                              // Vector Compare Equal To Floating-Point
vcmpequb   vcmpequb   10000006 IsVMX,CompareOp,SyncSideEffectFree                                            // vector compare equal unsigned byte
!vcmpequd   vcmpequd   100000c7 IsVMX,CompareOp,SyncSideEffectFree,HasRecordForm                              // Vector Compare Equal Unsigned Dword
vcmpeubr   vcmpeubr   10000406 IsVMX,IsRecordForm,CompareOp,SyncSideEffectFree                               // vector compare equal unsigned byte with record
vcmpequh   vcmpequh   10000046 IsVMX,CompareOp,SyncSideEffectFree                                            // vector compare equal unsigned halfword
vcmpeuhr   vcmpeuhr   10000446 IsVMX,IsRecordForm,CompareOp,SyncSideEffectFree                               // vector compare equal unsigned halfword with record
vcmpequw   vcmpequw   10000086 IsVMX,CompareOp,SyncSideEffectFree                                            // vector compare equal unsigned word
vcmpeuwr   vcmpeuwr   10000486 IsVMX,IsRecordForm,CompareOp,SyncSideEffectFree                               // vector compare equal unsigned word with record
vcmpgtsb   vcmpgtsb   10000306 IsVMX,CompareOp,SyncSideEffectFree                                            // vector compare greater than signed byte
!vcmpgtsd   vcmpgtsd   100003c7 IsVMX,CompareOp,SyncSideEffectFree,HasRecordForm                              // Vector Compare Greater Than Signed Dword
vcmpgsbr   vcmpgsbr   10000706 IsVMX,IsRecordForm,CompareOp,SyncSideEffectFree                               // vector compare greater than signed byte with record
vcmpgtsh   vcmpgtsh   10000346 IsVMX,CompareOp,SyncSideEffectFree                                            // vector compare greater than signed halfword
vcmpgshr   vcmpgshr   10000746 IsVMX,IsRecordForm,CompareOp,SyncSideEffectFree                               // vector compare greater than signed halfword with record
vcmpgtsw   vcmpgtsw   10000386 IsVMX,CompareOp,SyncSideEffectFree                                            // vector compare greater than signed word
vcmpgswr   vcmpgswr   10000786 IsVMX,IsRecordForm,CompareOp,SyncSideEffectFree                               // vector compare greater than signed word with record
vcmpgtub   vcmpgtub   10000206 IsVMX,CompareOp,SyncSideEffectFree                                            // vector compare greater than unsigned byte
vcmpgubr   vcmpgubr   10000606 IsVMX,IsRecordForm,CompareOp,SyncSideEffectFree                               // vector compare greater than unsigned byte with record
vcmpgtuh   vcmpgtuh   10000246 IsVMX,CompareOp,SyncSideEffectFree                                            // vector compare greater than unsigned halfword
vcmpguhr   vcmpguhr   10000646 IsVMX,IsRecordForm,CompareOp,SyncSideEffectFree                               // vector compare greater than unsigned halfword with record
vcmpgtuw   vcmpgtuw   10000286 IsVMX,CompareOp,SyncSideEffectFree                                            // vector compare greater than unsigned word
vcmpguwr   vcmpguwr   10000686 IsVMX,IsRecordForm,CompareOp,SyncSideEffectFree                               // vector compare greater than unsigned word with record
!vcmpneb    vcmpneb    10000007 IsVMX,HasRecordForm,CompareOp,SyncSideEffectFree                              // vector compare not equal Byte
!vcmpneh    vcmpneh    10000047 IsVMX,HasRecordForm,CompareOp,SyncSideEffectFree                              // vector compare not equal Hword
!vcmpnew    vcmpnew    10000087 IsVMX,HasRecordForm,CompareOp,SyncSideEffectFree                              // vector compare not equal Word
!vcmpnezb   vcmpnezb   10000107 IsVMX,HasRecordForm,CompareOp,SyncSideEffectFree                              // vector compare not equal or zero Byte
!vcmpnezh   vcmpnezh   10000147 IsVMX,HasRecordForm,CompareOp,SyncSideEffectFree                              // vector compare not equal or zero Hword
!vcmpnezw   vcmpnezw   10000187 IsVMX,HasRecordForm,CompareOp,SyncSideEffectFree                              // vector compare not equal or zero Word
!vctsxs     vctsxs     100003ca IsVMX,AltFormat,SyncSideEffectFree                                            // Vector Convert To Signed Word Saturate
!veqv       veqv       10000684 IsVMX,SyncSideEffectFree                                                      // Vector Logical Equivalence
vupkhsb    vupkhsb    1000020e IsVMX,AltFormat,SyncSideEffectFree                                            // vector unpack high signed byte
vupkhsh    vupkhsh    1000024e IsVMX,AltFormat,SyncSideEffectFree                                            // vector unpack high signed halfword
vupklsb    vupklsb    1000028e IsVMX,AltFormat,SyncSideEffectFree                                            // vector unpack low signed byte
vupklsh    vupklsh    100002ce IsVMX,AltFormat,SyncSideEffectFree                                            // vector unpack low signed halfword
!vupklsw    vupklsw    100006ce IsVMX,AltFormat,SyncSideEffectFree                                            // Vector Unpack Low Signed Word
!vupklpx    vupklpx    100003ce IsVMX,AltFormat,SyncSideEffectFree                                            // Vector Unpack Low Pixel
!vupkhsw    vupkhsw    1000064e IsVMX,AltFormat,SyncSideEffectFree                                            // Vector Unpack High Signed Word
!vpksdss    vpksdss    100005ce IsVMX,SyncSideEffectFree                                                      // Vector Pack Signed Dword Signed Saturate
!vpksdus    vpksdus    1000054e IsVMX,SyncSideEffectFree                                                      // Vector Pack Signed Dword Unsigned Saturate
vpkuhum    vpkuhum    1000000E IsVMX,SyncSideEffectFree                                                      // vector pack unsigned half word unsigned modulo
vpkuwum    vpkuwum    1000004E IsVMX,SyncSideEffectFree                                                      // vector pack unsigned word unsigned modulo
!vpkuwus    vpkuwus    100000ce IsVMX,SyncSideEffectFree                                                      // Vector Pack Unsigned Word Unsigned Saturate
!vpmsumb    vpmsumb    10000408 IsVMX,SyncSideEffectFree                                                      // Vector Polynomial Multiply-Sum Byte
!vpmsumh    vpmsumh    10000448 IsVMX,SyncSideEffectFree                                                      // Vector Polynomial Multiply-Sum Hword
!vpmsumw    vpmsumw    10000488 IsVMX,SyncSideEffectFree                                                      // Vector Polynomial Multiply-Sum Word
!vpopcntb   vpopcntb   10000703 IsVMX,AltFormat,SyncSideEffectFree                                            // Vector Population Count Byte
!vpopcntd   vpopcntd   100007c3 IsVMX,AltFormat,SyncSideEffectFree                                            // Vector Population Count Dword
!vpopcnth   vpopcnth   10000743 IsVMX,AltFormat,SyncSideEffectFree                                            // Vector Population Count Hword
!vpopcntw   vpopcntw   10000783 IsVMX,AltFormat,SyncSideEffectFree                                            // Vector Population Count Word
vmrghb     vmrghb     1000000C IsVMX,SyncSideEffectFree                                                      // vector merge high byte
vmrghh     vmrghh     1000004C IsVMX,SyncSideEffectFree                                                      // vector merge high half word
vmrghw     vmrghw     1000008C IsVMX,SyncSideEffectFree                                                      // vector merge high word
vmrglb     vmrglb     1000010C IsVMX,SyncSideEffectFree                                                      // vector merge low byte
vmrglh     vmrglh     1000014C IsVMX,SyncSideEffectFree                                                      // vector merge low half word
vmrglw     vmrglw     1000018C IsVMX,SyncSideEffectFree                                                      // vector merge low word
!VSX instructions
!lxsd       lxsd       e4000002 DWord,IsLoad,IsVSX                                                          // Load VSX scalar Dword
lxsdx      lxsdx      7c000498 DoubleFP,IsLoad,IsVSX,AltFormat                                             // Load VSX Scalar Doubleword Indexed
lxsdux     lxsdux     7c0004d8 DoubleFP,IsLoad,IsVSX,UpdateForm,AltFormat                                  // Load VSX Scalar Doubleword with Update Indexed
!lxssp      lxssp      e4000003 IsLoad,IsVSX                                                                // Load VSX scalar single
!lxsibzx    lxsibzx    7c00061a IsLoad,IsVSX,AltFormat                                                      // Load VSX scalar as integer byte & zero indexed
!lxsihzx    lxsihzx    7c00065a IsLoad,IsVSX,AltFormat                                                      // Load VSX scalar as integer Hword & zero indexed
!lxv        lxv        f4000001 IsLoad,IsVSX                                                                // Load VSX vector
!lxvb16x    lxvb16x    7c0006d8 IsLoad,IsVSX,AltFormat                                                      // Load VSX vector byte*16 indexed
!lxvh8x     lxvh8x     7c000658 IsLoad,IsVSX,AltFormat                                                      // Load VSX vector Hword*8 indexed
!lxvl       lxvl       7c00021a IsLoad,IsVSX,AltFormat                                                      // Load VSX vector with length
!lxvll      lxvll      7c00025a IsLoad,IsVSX,AltFormat                                                      // Load VSX vector left-justified with length
!lxvwsx     lxvwsx     7c0002d8 IsLoad,IsVSX,AltFormat                                                      // Load VSX vector word & splat indexed
!lxvx       lxvx       7c000218 IsLoad,IsVSX,AltFormat                                                      // Load VSX vector indexed
!stxsd      stxsd      f4000002 IsStore,IsVSX                                                               // Store VSX Scalar Dword
stxsdx     stxsdx     7c000598 DoubleFP,IsStore,IsVSX,AltFormat                                            // Store VSX Scalar Doubleword Indexed
stxsdux    stxsdux    7c0005d8 DoubleFP,IsStore,IsVSX,UpdateForm,AltFormat                                 // Store VSX Scalar Doubleword with Update Indexed
lxvd2x     lxvd2x     7C000698 IsLoad,IsVSX,AltFormat                                                      // Load VSX Vector Doubleword*2 Indexed
lxvd2ux    lxvd2ux    7C0006D8 IsLoad,IsVSX,UpdateForm,AltFormat                                           // Load VSX Vector Doubleword*2 with Update Indexed
lxvdsx     lxvdsx     7C000298 IsLoad,IsVSX,AltFormat                                                      // Load VSX Vector Doubleword & Splat Indexed
lxvw4x     lxvw4x     7C000618 IsLoad,IsVSX,AltFormat                                                      // Load VSX Vector Word*4 Indexed
lxvw4ux    lxvw4ux    7C000658 IsLoad,IsVSX,UpdateForm,AltFormat                                           // Load VSX Vector Word*4 with Update Indexed
stxvd2x    stxvd2x    7C000798 IsStore,IsVSX,AltFormat                                                     // store VSX Vector Doubleword*2 Indexed
stxvd2ux   stxvd2ux   7C0007D8 IsStore,IsVSX,UpdateForm,AltFormat                                          // store VSX Vector Doubleword*2 with Update Indexed
stxvw4x    stxvw4x    7C000718 IsStore,IsVSX,AltFormat                                                     // store VSX Vector Word*4 Indexed
stxvw4ux   stxvw4ux   7C000758 IsStore,IsVSX,UpdateForm,AltFormat                                          // store VSX Vector Word*4 with Update Indexed
!stxssp      stxssp      f4000003 IsVSX,IsStore                                 // Store VSX Scalar SP
xsabsdp    xsabsdp    f0000564 DoubleFP,IsVSX,AltFormat,SyncSideEffectFree                                 // VSX Scalar Absolute Value Double-Precision
xsadddp    xsadddp    f0000100 DoubleFP,IsVSX,SyncSideEffectFree                                           // VSX Scalar Add Double-Precision
xscmpodp   xscmpodp   f0000158 DoubleFP,IsVSX,CompareOp,SyncSideEffectFree                                 // VSX Scalar Compare Ordered Double-Precision
xscmpudp   xscmpudp   f0000118 DoubleFP,IsVSX,CompareOp,SyncSideEffectFree                                 // VSX Scalar Compare Unordered Double-Precision
!stxsibx    stxsibx    7c00071a IsStore,IsVSX,AltFormat                                                     // Store VSX scalar as integer byte indexed
!stxsihx    stxsihx    7c00075a IsStore,IsVSX,AltFormat                                                     // Store VSX scalar as integer Hword indexed
!stxv       stxv       f4000005 IsStore,IsVSX                                                               // Store VSX vector
!stxvb16x   stxvb16x   7c0007d8 IsStore,IsVSX,AltFormat                                                     // Store VSX vector byte*16 indexed
!stxvh8x    stxvh8x    7c000758 IsStore,IsVSX,AltFormat                                                     // Store VSX vector Hword*8 indexed
!stxvl      stxvl      7c00031a IsStore,IsVSX,AltFormat                                                     // Store VSX vector with length
!stxvll     stxvll     7c00035a IsStore,IsVSX,AltFormat                                                     // Store VSX vector left-justified with length
!stxvx      stxvx      7c000318 IsStore,IsVSX,AltFormat                                                     // Store VSX vector indexed
!xsabsqp    xsabsqp    fc000648 IsVSX,SyncSideEffectFree,AltFormat                                          // VSX scalar absolute QP
!xsaddqp    xsaddqp    fc000008 IsVSX,SyncSideEffectFree                                                    // VSX scalar add QP
!xscmpexpqp xscmpexpqp fc000148 IsVSX,CompareOp,SyncSideEffectFree                                          // VSX scalar compare exponents QP
!xscmpoqp   xscmpoqp   fc000108 IsVSX,CompareOp,SyncSideEffectFree                                          // VSX scalar compare ordered QP
!xscmpuqp   xscmpuqp   fc000508 IsVSX,CompareOp,SyncSideEffectFree                                          // VSX Scalar Compare Unordered QP
xscpsgndp  xscpsgndp  f0000580 DoubleFP,IsVSX,IsRegCopy,SyncSideEffectFree                                 // VSX Scalar Copy Sign Double-Precision , For VSR Copy register
!xscpsgnqp  xscpsgnqp  fc0000c8 IsVSX,SyncSideEffectFree                                                    // VSX Scalar Copy Sign QP
!xscvqpdp   xscvqpdp   fc140688 IsVSX,SyncSideEffectFree,AltFormat                                          // VSX Scalar Convert QP to DP
xscvdpsxds xscvdpsxds f0000560 DoubleFP,IsVSX,AltFormat,SyncSideEffectFree                                 // VSX Scalar Convert Double-Precision to Signed Integer Doubleword Saturate
xscvdpsxws xscvdpsxws f0000160 DoubleFP,IsVSX,AltFormat,SyncSideEffectFree                                 // VSX Scalar Convert Double-Precision to Signed Integer Word Saturate
!xscvdpqp   xscvdpqp   fc160688 IsVSX,SyncSideEffectFree,AltFormat                                          // VSX Scalar Convert DP to QP
!xscvqpsdz  xscvqpsdz  fc190688 IsVSX,SyncSideEffectFree,AltFormat                                          // VSX Scalar Convert QP to Signed Dword truncate
!xscvqpswz  xscvqpswz  fc090688 IsVSX,SyncSideEffectFree,AltFormat                                          // VSX Scalar Convert QP to Signed Word truncate
!xscvqpudz  xscvqpudz  fc110688 IsVSX,SyncSideEffectFree,AltFormat                                          // VSX Scalar Convert QP to Unsigned Dword truncate
!xscvqpuwz  xscvqpuwz  fc010688 IsVSX,SyncSideEffectFree,AltFormat                                          // VSX Scalar Convert QP to Unsigned Word truncate
!xscvsdqp   xscvsdqp   fc0a0688 IsVSX,SyncSideEffectFree,AltFormat                                          // VSX Scalar Convert Signed Dword to QP
!xscvudqp   xscvudqp   fc020688 IsVSX,SyncSideEffectFree,AltFormat                                          // VSX Scalar Convert Unsigned Dword to QP
!xsdivqp    xsdivqp    fc000448 IsVSX,SyncSideEffectFree                                                    // VSX Scalar Divide QP
xsdivdp    xsdivdp    f00001c0 DoubleFP,IsVSX,SyncSideEffectFree                                           // VSX Scalar Divide Double-Precision
!xsiexpqp   xsiexpqp   fc0006c8 IsVSX,SyncSideEffectFree                                                    // VSX Scalar Insert Exponent QP
!xsmaddqp   xsmaddqp   fc000308 IsVSX,SyncSideEffectFree                                                    // VSX Scalar Multiply-Add QP
!xsmsubqp   xsmsubqp   fc000348 IsVSX,SyncSideEffectFree                                                    // VSX Scalar Multiply-Subtract QP
!xsmulqp    xsmulqp    fc000048 IsVSX,SyncSideEffectFree                                                    // VSX Scalar Multiply QP
!xsmaxcdp   xsmaxcdp   f0000400 IsVSX,SyncSideEffectFree                                                    // VSX Scalar Maximum Type-C Double-Precision
!xsmaxjdp   xsmaxjdp   f0000480 IsVSX,SyncSideEffectFree                                                    // VSX Scalar Maximum Type-J Double-Precision
xsmaddadp  xsmaddadp  f0000108 DoubleFP,IsVSX,SyncSideEffectFree                                           // VSX Scalar Multiply-Add Type A Double-Precision
xsmaddmdp  xsmaddmdp  f0000148 DoubleFP,IsVSX,SyncSideEffectFree                                           // VSX Scalar Multiply-Add Type M Double-Precision
!xsmincdp   xsmincdp   f0000440 IsVSX,SyncSideEffectFree                                                    // VSX Scalar Minimum Type-C Double-Precision
!xsminjdp   xsminjdp   f00004c0 IsVSX,SyncSideEffectFree                                                    // VSX Scalar Minimum Type-J Double-Precision
xsmsubadp  xsmsubadp  f0000188 DoubleFP,IsVSX,SyncSideEffectFree                                           // VSX Scalar Multiply-Subtract Type A Double-Precision
xsmsubmdp  xsmsubmdp  f00001c8 DoubleFP,IsVSX,SyncSideEffectFree                                           // VSX Scalar Multiply-Subtract Type M Double-Precision
xsmuldp    xsmuldp    f0000180 DoubleFP,IsVSX,SyncSideEffectFree                                           // VSX Scalar Multiply Double-Precision
xsnabsdp   xsnabsdp   f00005a4 DoubleFP,IsVSX,AltFormat,SyncSideEffectFree                                 // VSX Scalar Negative Absolute Value Double-Precision
!xsnmaddqp  xsnmaddqp  fc000388 IsVSX,SyncSideEffectFree                                                    // VSX Scalar Negative Multiply-Add QP
!xsnmsubqp  xsnmsubqp  fc0003c8 IsVSX,SyncSideEffectFree                                                    // VSX Scalar Negative Multiply-Subtract QP
xsnegdp    xsnegdp    f00005e4 DoubleFP,IsVSX,AltFormat,SyncSideEffectFree                                 // VSX Scalar Negate Double-Precision
xsnmaddadp xsnmaddadp f0000508 DoubleFP,IsVSX,SyncSideEffectFree                                           // VSX Scalar Negative Multiply-Add Type A Double-Precision
xsnmaddmdp xsnmaddmdp f0000548 DoubleFP,IsVSX,SyncSideEffectFree                                           // VSX Scalar Negative Multiply-Add Type M Double-Precision
xsnmsubadp xsnmsubadp f0000588 DoubleFP,IsVSX,SyncSideEffectFree                                           // VSX Scalar Negative Multiply-Subtract Type A Double-Precision
xsnmsubmdp xsnmsubmdp f00005c8 DoubleFP,IsVSX,SyncSideEffectFree                                           // VSX Scalar Negative Multiply-Subtract Type M Double-Precision
!xsnabsqp   xsnabsqp   fc080648 IsVSX,SyncSideEffectFree,AltFormat                                          // VSX Scalar Negative Absolute QP
!xsnegqp    xsnegqp    fc100648 IsVSX,SyncSideEffectFree,AltFormat                                          // VSX Scalar Negate QP
xsrdpic    xsrdpic    f00001ac DoubleFP,IsVSX,AltFormat,SyncSideEffectFree                                 // VSX Scalar Round to Double-Precision exact using Current rounding mode
xsredp     xsredp     f0000168 DoubleFP,IsVSX,AltFormat,SyncSideEffectFree                                 // VSX Scalar Reciprocal Estimate Double-Precision
xsrsqrtedp xsrsqrtedp f0000128 DoubleFP,IsVSX,AltFormat,SyncSideEffectFree                                 // VSX Scalar Reciprocal Square Root Estimate Double-Precision
!xssqrtqp   xssqrtqp   fc1b0648 IsVSX,SyncSideEffectFree,AltFormat                                          // VSX Scalar Square Root QP
!xssubqp    xssubqp    fc000408 IsVSX,SyncSideEffectFree                                                    // VSX Scalar Subtract QP
!xststdcqp  xststdcqp  fc000588 IsVSX,SyncSideEffectFree,AltFormat,CompareOp                                // VSX Scalar Test Data Class QP
!xsxsigqp   xsxsigqp   fc120648 IsVSX,SyncSideEffectFree,AltFormat                                          // VSX Scalar Extract Significand QP
!xsxexpqp   xsxexpqp   fc020648 IsVSX,SyncSideEffectFree,AltFormat                                          // VSX Scalar Extract Exponent QP
!xxextractuw xxextractuw f0000294 IsVSX,AltFormat,SyncSideEffectFree                                        // VSX Vector Extract Unsigned Word
!xxinsertw  xxinsertw  f00002d4 IsVSX,AltFormat,SyncSideEffectFree                                          // VSX Vector Insert Word
xxlor      xxlor      f0000490 DoubleFP,IsVSX,SyncSideEffectFree                                           // VSX Logical OR
xxlnor     xxlnor     f0000510 DoubleFP,IsVSX,SyncSideEffectFree                                           // VSX Logical NOR
xxsel      xxsel      f0000030 DoubleFP,IsVSX,SyncSideEffectFree                                           // VSX Select (Operands usage are diffent than fsel)
xxsldwi    xxsldwi    f0000010 DoubleFP,IsVSX,SyncSideEffectFree                                           // VSX Shift Left Double by Word Immediate
xxspltw    xxspltw    f0000290 IsVSX,SyncSideEffectFree,AltFormat                                          // VSX Splat Word
!xxspltib   xxspltib   f00002d0 IsVSX,SyncSideEffectFree                                                    // VSX Vector Splat Immediate Byte
!xxperm     xxperm     f00000d0 IsVSX,SyncSideEffectFree                                                    // VSX Vector Permute
xxpermdi   xxpermdi   f0000050 DoubleFP,IsVSX,SyncSideEffectFree                                           // VSX Permute Doubleword Immediate
!xxpermr    xxpermr    f00001d0 IsVSX,SyncSideEffectFree                                                    // VSX Vector Permute Right-indexed
xssqrtdp   xssqrtdp   f000012c DoubleFP,IsVSX,AltFormat,SyncSideEffectFree                                 // VSX Scalar Square Root Double-Precision
xssubdp    xssubdp    f0000140 DoubleFP,IsVSX,SyncSideEffectFree                                           // VSX Scalar Subtract Double-Precision
!xscmpeqdp  xscmpeqdp  f0000018 IsVSX,SyncSideEffectFree,CompareOp                                          // VSX Scalar Compare Equal Double-Precision
!xscmpgtdp  xscmpgtdp  f0000058 IsVSX,SyncSideEffectFree,CompareOp                                          // VSX Scalar Compare Greater Than Double-Precision
!xscmpgedp  xscmpgedp  f0000098 IsVSX,SyncSideEffectFree,CompareOp                                          // VSX Scalar Compare Greater Than or Equal Double-Precision
!xscmpnedp  xscmpnedp  f00000d8 IsVSX,SyncSideEffectFree,CompareOp                                          // VSX Scalar Compare Not Equal Double-Precision
!xscmpexpdp xscmpexpdp f00001d8 IsVSX,SyncSideEffectFree,CompareOp                                          // VSX Scalar Compare Exponents DP
xscvsxddp  xscvsxddp  f00005e0 DoubleFP,IsVSX,AltFormat,SyncSideEffectFree                                 // VSX Scalar Convert Signed Integer Doubleword to Double-Precision
!xscvdphp   xscvdphp   f011056c DoubleFP,IsVSX,AltFormat,SyncSideEffectFree                                 // VSX Scalar Convert DP to HP
xscvdpsp   xscvdpsp   f0000424 DoubleFP,IsVSX,AltFormat,SyncSideEffectFree                                 // VSX Scalar Convert From Double-Precision to Single-Precision
!xscvhpdp   xscvhpdp   f010056c IsVSX,AltFormat,SyncSideEffectFree                                          // VSX Scalar Convert HP to DP
!xsiexpdp   xsiexpdp   f000072c IsVSX,SyncSideEffectFree                                                    // VSX Scalar Insert Exponent DP
!xststdcdp  xststdcdp  f00005a8 DoubleFP,IsVSX,AltFormat,SyncSideEffectFree,CompareOp                       // VSX Scalar Test Data Class DP
!xststdcsp  xststdcsp  f00004a8 SingleFP,IsVSX,AltFormat,SyncSideEffectFree,CompareOp                       // VSX Scalar Test Data Class SP
!xsxexpdp   xsxexpdp   f000056c IsVSX,AltFormat,SyncSideEffectFree                                          // VSX Scalar Extract Exponent DP
!xsxsigdp   xsxsigdp   f001056c IsVSX,AltFormat,SyncSideEffectFree                                          // VSX Scalar Extract Significand DP
xvadddp    xvadddp    f0000300 DoubleFP,IsVSX,SyncSideEffectFree                                           // VSX Vector Add Double-Precision
!xvcmpnesp  xvcmpnesp  f00002d8 HasRecordForm,IsVSX,SyncSideEffectFree,CompareOp                            // VSX Vector Compare Not Equal Single-Precision
!xvcmpnedp  xvcmpnedp  f00003d8 HasRecordForm,IsVSX,SyncSideEffectFree,CompareOp                            // VSX Vector Compare Not Equal Double-Precision
xvmindp    xvmindp    f0000740 DoubleFP,IsVSX,SyncSideEffectFree                                           // VSX Vector Min Double-Precision
xvmaxdp    xvmaxdp    f0000700 DoubleFP,IsVSX,SyncSideEffectFree                                           // VSX Vector Max Double-Precision
xvcmpeqdp   xvcmpeqdp   f0000318 DoubleFP,IsVSX,SyncSideEffectFree,CompareOp                               // VSX Vector Compare Equal To Double-Precision
xvcmpeqdp_r   xvcmpeqdp.   f0000718 DoubleFP,IsVSX,SyncSideEffectFree,CompareOp,IsRecordForm               // VSX Vector Compare Equal To Double-Precision
xvcmpgedp   xvcmpgedp   f0000398 DoubleFP,IsVSX,SyncSideEffectFree,CompareOp                               // VSX Vector Compare Greater Than Or Equal To Double-Precision
xvcmpgedp_r   xvcmpgedp.   f0000798 DoubleFP,IsVSX,SyncSideEffectFree,CompareOp,IsRecordForm               // VSX Vector Compare Greater Than Or Equal To Double-Precision
xvcmpgtdp   xvcmpgtdp   f0000358 DoubleFP,IsVSX,SyncSideEffectFree,CompareOp                               // VSX Vector Compare Greater Than Double-Precision
xvcmpgtdp_r   xvcmpgtdp.   f0000758 DoubleFP,IsVSX,SyncSideEffectFree,CompareOp,IsRecordForm               // VSX Vector Compare Greater Than Double-Precision
!xvcvhpsp   xvcvhpsp   f018076c IsVSX,AltFormat,SyncSideEffectFree                                          // VSX Vector Convert HP to SP
!xvcvsphp   xvcvsphp   f019076c IsVSX,AltFormat,SyncSideEffectFree                                          // VSX Vector Convert SP to HP
xvdivdp    xvdivdp    f00003C0 DoubleFP,IsVSX,SyncSideEffectFree                                           // VSX Vector Divide Double-Precision
!xviexpsp   xviexpsp   f00006c0 IsVSX,SyncSideEffectFree                                                    // VSX Vector Insert Exponent SP
!xviexpdp   xviexpdp   f00007c0 IsVSX,SyncSideEffectFree                                                    // VSX Vector Insert Exponent DP
xvmuldp    xvmuldp    f0000380 DoubleFP,IsVSX,SyncSideEffectFree                                           // VSX Vector Multiply Double-Precision
xvnegdp    xvnegdp    f00007e4 DoubleFP,IsVSX,SyncSideEffectFree,AltFormat                                 // VSX Vector Negate Double-Precision
xvnmsubadp  xvnmsubadp  f0000788 DoubleFP,IsVSX,SyncSideEffectFree,UsesTarget                              // VSX Vector Negative Multiply-Subtract Type-A Double-Precision
xvnmsubmdp  xvnmsubmdp  f00007c8 DoubleFP,IsVSX,SyncSideEffectFree,UsesTarget                              // VSX Vector Negative Multiply-Subtract Type-M Double-Precision
xvsubdp    xvsubdp    f0000340 DoubleFP,IsVSX,SyncSideEffectFree                                           // VSX Vector Subtract Double-Precision
xvmaddadp  xvmaddadp  f0000308 DoubleFP,IsVSX,SyncSideEffectFree,UsesTarget                                // VSX Vector Multiply-Add Type-A Double-Precision
xvmaddmdp  xvmaddmdp  f0000348 DoubleFP,IsVSX,SyncSideEffectFree,UsesTarget                                // VSX Vector Multiply-Add Type-M Double-Precision
xvmsubadp  xvmsubadp  f0000388 DoubleFP,IsVSX,SyncSideEffectFree,UsesTarget                                // VSX Vector Multiply-Sub Type-A Double-Precision
xvmsubmdp  xvmsubmdp  f00003c8 DoubleFP,IsVSX,SyncSideEffectFree,UsesTarget                                // VSX Vector Multiply-Sub Type-M Double-Precision
xvsqrtdp   xvsqrtdp   f000032c DoubleFP,IsVSX,SyncSideEffectFree,AltFormat                                 // VSX Vector Square Root Double-Precision
!xvtstdcsp  xvtstdcsp  f00006a8 SingleFP,IsVSX,SyncSideEffectFree,AltFormat                                 // VSX Vector Test Data Class SP
!xvtstdcdp  xvtstdcdp  f00007a8 DoubleFP,IsVSX,SyncSideEffectFree,AltFormat                                 // VSX Vector Test Data Class DP
!xvxexpdp   xvxexpdp   f000076c IsVSX,SyncSideEffectFree,AltFormat                                          // VSX Vector Extract Exponent DP
!xvxexpsp   xvxexpsp   f008076c IsVSX,SyncSideEffectFree,AltFormat                                          // VSX Vector Extract Exponent SP
!xvxsigdp   xvxsigdp   f001076c IsVSX,SyncSideEffectFree,AltFormat                                          // VSX Vector Extract Significand DP
!xvxsigsp   xvxsigsp   f009076c IsVSX,SyncSideEffectFree,AltFormat                                          // VSX Vector Extract Significand SP
!xxbrd      xxbrd      f017076c IsVSX,SyncSideEffectFree,AltFormat                                          // VSX Vector Byte-Reverse Dword
!xxbrh      xxbrh      f007076c IsVSX,SyncSideEffectFree,AltFormat                                          // VSX Vector Byte-Reverse Hword
!xxbrw      xxbrw      f00f076c IsVSX,SyncSideEffectFree,AltFormat                                          // VSX Vector Byte-Reverse Word
!xxbrq      xxbrq      f01f076c IsVSX,SyncSideEffectFree,AltFormat                                          // VSX Vector Byte-Reverse Qword
! These need to be added to the XIL map...
fmrgew      fmrgew      FC00078C IsVSX,SyncSideEffectFree							// Merge Even Word
fmrgow      fmrgow      FC00068C IsVSX,SyncSideEffectFree							// Merge Odd Word
lxsiwax     lxsiwax     7C000098 IsVSX,IsLoad									// VSX Scalar as Integer Word Algebraic Indexed
lxsiwzx     lxsiwzx     7C000018 IsVSX,IsLoad									// VSX Scalar as Integer Word and Zero Indexed
lxsspx      lxsspx      7C000418 IsVSX,IsLoad									// VSX Scalar Single-Precision Indexed
stxsiwx     stxsiwx     7C000118 IsVSX,IsStore									// VSX Scalar as Integer Word Indexed
stxsspx     stxsspx     7C000518 IsVSX,IsStore									// VSR Scalar Word Indexed
xsaddsp     xsaddsp     F0000000 IsVSX,SyncSideEffectFree							// Scalar Add Single-Precision
xscvdpspn   xscvdpspn   F000042C IsVSX,DoubleFP,SyncSideEffectFree,AltFormat					// Scalar Convert Double-Precision to Single-Precision format Non-signalling
xscvdpuxds  xscvdpuxds  F0000520 IsVSX,DoubleFP,SyncSideEffectFree,AltFormat					// Scalar Convert Double-Precision to Unsigned Fixed-Point Doubleword Saturate
xscvdpuxws  xscvdpuxws  F0000120 IsVSX,DoubleFP,SyncSideEffectFree,AltFormat					// Scalar Convert Double-Precision to Unsigned Fixed-Point Word Saturate
xscvspdp    xscvspdp    F0000524 IsVSX,DoubleFP,SyncSideEffectFree,AltFormat					// Scalar Convert Single-Precision to Double-Precision (p=1)
xscvspdpn   xscvspdpn   F000052C IsVSX,DoubleFP,SyncSideEffectFree,AltFormat					// Convert Single-Precision to Double-Precision format Non-signalling
xscvsxdsp   xscvsxdsp   F00004E0 IsVSX,DoubleFP,SyncSideEffectFree,AltFormat					// Scalar Convert Signed Fixed-Point Doubleword to Single-Precision
xscvuxddp   xscvuxddp   F00005A0 IsVSX,DoubleFP,SyncSideEffectFree,AltFormat					// Scalar Convert Unsigned Fixed-Point Doubleword to Double-Precision
xscvuxdsp   xscvuxdsp   F00004A0 IsVSX,DoubleFP,SyncSideEffectFree,AltFormat					// Scalar Convert Unsigned Fixed-Point Doubleword to Single-Precision
xsdivsp     xsdivsp     F00000C0 IsVSX,SyncSideEffectFree							// Scalar Divide Single-Precision
xsmaddasp   xsmaddasp   F0000008 IsVSX,SyncSideEffectFree							// Scalar Multiply-Add Type-A Single-Precision
xsmaddmsp   xsmaddmsp   F0000048 IsVSX,SyncSideEffectFree							// Scalar Multiply-Add Type-M Single-Precision
xsmaxdp     xsmaxdp     F0000500 IsVSX,DoubleFP,SyncSideEffectFree						// Scalar Maximum Double-Precision
xsmindp     xsmindp     F0000540 IsVSX,DoubleFP,SyncSideEffectFree						// Scalar Minimum Double-Precision
xsmsubasp   xsmsubasp   F0000088 IsVSX,SyncSideEffectFree							// Scalar Multiply-Subtract Type-A Single-Precision
xsmsubmsp   xsmsubmsp   F00000C8 IsVSX,SyncSideEffectFree							// Scalar Multiply-Subtract Type-M Single-Precision
xsmulsp     xsmulsp     F0000080 IsVSX,SyncSideEffectFree							// Scalar Multiply Single-Precision
xsnmaddasp  xsnmaddasp  F0000408 IsVSX,SyncSideEffectFree							// Scalar Negative Multiply-Add Type-A Single-Precision
xsnmaddmsp  xsnmaddmsp  F0000448 IsVSX,SyncSideEffectFree							// Scalar Negative Multiply-Add Type-M Single-Precision
xsnmsubasp  xsnmsubasp  F0000488 IsVSX,SyncSideEffectFree							// Scalar Negative Multiply-Subtract Type-A Single-Precision
xsnmsubmsp  xsnmsubmsp  F00004C8 IsVSX,SyncSideEffectFree							// Scalar Negative Multiply-Subtract Type-M Single-Precision
xsrdpi      xsrdpi      F0000124 IsVSX,DoubleFP,SyncSideEffectFree,AltFormat					// Scalar Round to Double-Precision Integer
xsrdpim     xsrdpim     F00001E4 IsVSX,DoubleFP,SyncSideEffectFree,AltFormat					// Scalar Round to Double-Precision Integer toward -Infinity
xsrdpip     xsrdpip     F00001A4 IsVSX,DoubleFP,SyncSideEffectFree,AltFormat					// Scalar Round to Double-Precision Integer toward +Infinity
xsrdpiz     xsrdpiz     F0000164 IsVSX,DoubleFP,SyncSideEffectFree,AltFormat					// Scalar Round to Double-Precision Integer toward Zero
xsresp      xsresp      F0000068 IsVSX,SyncSideEffectFree,AltFormat						// Scalar Reciprocal Estimate Single-Precision
xsrsp       xsrsp       F0000464 IsVSX,SyncSideEffectFree,AltFormat						// Scalar Round to Single-Precision
xsrsqrtesp  xsrsqrtesp  F0000028 IsVSX,SyncSideEffectFree,AltFormat						// Scalar Reciprocal Square Root Estimate Single-Precision
xssqrtsp    xssqrtsp    F000002C IsVSX,SyncSideEffectFree,AltFormat						// Scalar Square Root Single-Precision
xssubsp     xssubsp     F0000040 IsVSX,SyncSideEffectFree							// Scalar Subtract Single-Precision
xxland      xxland      F0000410 IsVSX,SyncSideEffectFree							// Logical AND
xxlandc     xxlandc     F0000450 IsVSX,SyncSideEffectFree							// Logical AND with Complement
xxleqv      xxleqv      F00005D0 IsVSX,SyncSideEffectFree							// Logical Equivalence
xxlnand     xxlnand     F0000590 IsVSX,SyncSideEffectFree							// Logical NAND
xxlorc      xxlorc      F0000550 IsVSX,SyncSideEffectFree							// Logical OR with Complement
xxlxor      xxlxor      F00004D0 IsVSX,SyncSideEffectFree							// Logical XOR
xxmrghw     xxmrghw     F0000090 IsVSX,SyncSideEffectFree							// Merge High Word
xxmrglw     xxmrglw     F0000190 IsVSX,SyncSideEffectFree							// Merge Low Word
! VSX vector
! These need to be added to the XIL map...
vmrgew      vmrgew      1000078C IsVSX,SyncSideEffectFree							// Merge Even Word
vmrgow      vmrgow      1000068C IsVSX,SyncSideEffectFree							// Merge Odd Word
xvabsdp     xvabsdp     F0000764 IsVSX,DoubleFP,SyncSideEffectFree,AltFormat					// Vector Absolute Value Double-Precision
xvabssp     xvabssp     F0000664 IsVSX,SyncSideEffectFree,AltFormat						// Vector Absolute Value Single-Precision
xvaddsp     xvaddsp     F0000200 IsVSX,SyncSideEffectFree							// Vector Add Single-Precision
xvcmpeqsp   xvcmpeqsp   F0000218 IsVSX,SyncSideEffectFree,CompareOp						// Vector Compare Equal To Single-Precision
xvcmpeqsp_r xvcmpeqsp.  F0000618 IsVSX,SyncSideEffectFree,CompareOp,IsRecordForm				// Vector Compare Equal To Single-Precision & record CR6
xvcmpgesp   xvcmpgesp   F0000298 IsVSX,SyncSideEffectFree,CompareOp						// Vector Compare Greater Than or Equal To Single-Precision
xvcmpgesp_r xvcmpgesp.  F0000698 IsVSX,SyncSideEffectFree,CompareOp,IsRecordForm				// Vector Compare Greater Than or Equal To Single-Precision & record CR6
xvcmpgtsp   xvcmpgtsp   F0000258 IsVSX,SyncSideEffectFree,CompareOp						// Vector Compare Greater Than Single-Precision
xvcmpgtsp_r xvcmpgtsp.  F0000658 IsVSX,SyncSideEffectFree,CompareOp,IsRecordForm				// Vector Compare Greater Than Single-Precision & record CR6
xvcpsgndp   xvcpsgndp   F0000780 IsVSX,DoubleFP,SyncSideEffectFree						// Vector Copy Sign Double-Precision
xvcpsgnsp   xvcpsgnsp   F0000680 IsVSX,SyncSideEffectFree							// Vector Copy Sign Single-Precision
xvcvdpsp    xvcvdpsp    F0000624 IsVSX,DoubleFP,SyncSideEffectFree,AltFormat					// Vector Convert Double-Precision to Single-Precision
xvcvdpsxds  xvcvdpsxds  F0000760 IsVSX,DoubleFP,SyncSideEffectFree,AltFormat					// Vector Convert Double-Precision to Signed Fixed-Point Doubleword Saturate
xvcvdpsxws  xvcvdpsxws  F0000360 IsVSX,DoubleFP,SyncSideEffectFree,AltFormat					// Vector Convert Double-Precision to Signed Fixed-Point Word Saturate
xvcvdpuxds  xvcvdpuxds  F0000720 IsVSX,DoubleFP,SyncSideEffectFree,AltFormat					// Vector Convert Double-Precision to Unsigned Fixed-Point Doubleword Saturate
xvcvdpuxws  xvcvdpuxws  F0000320 IsVSX,DoubleFP,SyncSideEffectFree,AltFormat					// Vector Convert Double-Precision to Unsigned Fixed-Point Word Saturate
xvcvspdp    xvcvspdp    F0000724 IsVSX,DoubleFP,SyncSideEffectFree,AltFormat					// Vector Convert Single-Precision to Double-Precision
xvcvspsxds  xvcvspsxds  F0000660 IsVSX,DoubleFP,SyncSideEffectFree,AltFormat					// Vector Convert Single-Precision to Signed Fixed-Point Doubleword Saturate
xvcvspsxws  xvcvspsxws  F0000260 IsVSX,SyncSideEffectFree,AltFormat						// Vector Convert Single-Precision to Signed Fixed-Point Word Saturate
xvcvspuxds  xvcvspuxds  F0000620 IsVSX,DoubleFP,SyncSideEffectFree,AltFormat					// Vector Convert Single-Precision to Unsigned Fixed-Point Doubleword Saturate
xvcvspuxws  xvcvspuxws  F0000220 IsVSX,SyncSideEffectFree,AltFormat						// Vector Convert Single-Precision to Unsigned Fixed-Point Word Saturate
xvcvsxddp   xvcvsxddp   F00007E0 IsVSX,DoubleFP,SyncSideEffectFree,AltFormat					// Vector Convert Signed Fixed-Point Doubleword to Double-Precision
xvcvsxdsp   xvcvsxdsp   F00006E0 IsVSX,DoubleFP,SyncSideEffectFree,AltFormat					// Vector Convert Signed Fixed-Point Doubleword to Single-Precision
xvcvsxwdp   xvcvsxwdp   F00003E0 IsVSX,DoubleFP,SyncSideEffectFree,AltFormat					// Vector Convert Signed Fixed-Point Word to Double-Precision
xvcvsxwsp   xvcvsxwsp   F00002E0 IsVSX,SyncSideEffectFree,AltFormat						// Vector Convert Signed Fixed-Point Word to Single-Precision
xvcvuxddp   xvcvuxddp   F00007A0 IsVSX,DoubleFP,SyncSideEffectFree,AltFormat					// Vector Convert Unsigned Fixed-Point Doubleword to Double-Precision
xvcvuxdsp   xvcvuxdsp   F00006A0 IsVSX,DoubleFP,SyncSideEffectFree,AltFormat					// Vector Convert Unsigned Fixed-Point Doubleword to Single-Precision
xvcvuxwdp   xvcvuxwdp   F00003A0 IsVSX,DoubleFP,SyncSideEffectFree,AltFormat					// Vector Convert Unsigned Fixed-Point Word to Double-Precision
xvcvuxwsp   xvcvuxwsp   F00002A0 IsVSX,SyncSideEffectFree,AltFormat						// Vector Convert Unsigned Fixed-Point Word to Single-Precision
xvdivsp     xvdivsp     F00002C0 IsVSX,SyncSideEffectFree							// Vector Divide Single-Precision
xvmaddasp   xvmaddasp   F0000208 IsVSX,SyncSideEffectFree							// Vector Multiply-Add Type-A Single-Precision
xvmaddmsp   xvmaddmsp   F0000248 IsVSX,SyncSideEffectFree							// Vector Multiply-Add Type-M Single-Precision
xvmaxsp     xvmaxsp     F0000600 IsVSX,SyncSideEffectFree							// Vector Maximum Single-Precision
xvminsp     xvminsp     F0000640 IsVSX,SyncSideEffectFree							// Vector Minimum Single-Precision
xvmsubasp   xvmsubasp   F0000288 IsVSX,SyncSideEffectFree							// Vector Multiply-Subtract Type-A Single-Precision
xvmsubmsp   xvmsubmsp   F00002C8 IsVSX,SyncSideEffectFree							// Vector Multiply-Subtract Type-M Single-Precision
xvmulsp     xvmulsp     F0000280 IsVSX,SyncSideEffectFree							// Vector Multiply Single-Precision
xvnabsdp    xvnabsdp    F00007A4 IsVSX,DoubleFP,SyncSideEffectFree,AltFormat					// Vector Negative Absolute Value Double-Precision
xvnabssp    xvnabssp    F00006A4 IsVSX,SyncSideEffectFree,AltFormat						// Vector Negative Absolute Value Single-Precision
xvnegsp     xvnegsp     F00006E4 IsVSX,SyncSideEffectFree,AltFormat						// Vector Negate Single-Precision
xvnmaddadp  xvnmaddadp  F0000708 IsVSX,DoubleFP,SyncSideEffectFree						// Vector Negative Multiply-Add Type-A Double-Precision
xvnmaddasp  xvnmaddasp  F0000608 IsVSX,SyncSideEffectFree							// Vector Negative Multiply-Add Type-A Single-Precision
xvnmaddmdp  xvnmaddmdp  F0000748 IsVSX,DoubleFP,SyncSideEffectFree						// Vector Negative Multiply-Add Type-M Double-Precision
xvnmaddmsp  xvnmaddmsp  F0000648 IsVSX,SyncSideEffectFree							// Vector Negative Multiply-Add Type-M Single-Precision
xvnmsubasp  xvnmsubasp  F0000688 IsVSX,SyncSideEffectFree							// Vector Negative Multiply-Subtract Type-A Single-Precision
xvnmsubmsp  xvnmsubmsp  F00006C8 IsVSX,SyncSideEffectFree							// Vector Negative Multiply-Subtract Type-M Single-Precision
xvrdpi      xvrdpi      F0000324 IsVSX,DoubleFP,SyncSideEffectFree,AltFormat					// Vector Round to Double-Precision Integer
xvrdpic     xvrdpic     F00003AC IsVSX,DoubleFP,SyncSideEffectFree,AltFormat					// Vector Round to Double-Precision Integer using Current rounding mode
xvrdpim     xvrdpim     F00003E4 IsVSX,DoubleFP,SyncSideEffectFree,AltFormat					// Vector Round to Double-Precision Integer toward -Infinity
xvrdpip     xvrdpip     F00003A4 IsVSX,DoubleFP,SyncSideEffectFree,AltFormat					// Vector Round to Double-Precision Integer toward +Infinity
xvrdpiz     xvrdpiz     F0000364 IsVSX,DoubleFP,SyncSideEffectFree,AltFormat					// Vector Round to Double-Precision Integer toward Zero
xvredp      xvredp      F0000368 IsVSX,DoubleFP,SyncSideEffectFree,AltFormat					// Vector Reciprocal Estimate Double-Precision
xvresp      xvresp      F0000268 IsVSX,SyncSideEffectFree,AltFormat						// Vector Reciprocal Estimate Single-Precision
xvrspi      xvrspi      F0000224 IsVSX,SyncSideEffectFree,AltFormat						// Vector Round to Single-Precision Integer
xvrspic     xvrspic     F00002AC IsVSX,SyncSideEffectFree,AltFormat						// Vector Round to Single-Precision Integer using Current rounding mode
xvrspim     xvrspim     F00002E4 IsVSX,SyncSideEffectFree,AltFormat						// Vector Round to Single-Precision Integer toward -Infinity
xvrspip     xvrspip     F00002A4 IsVSX,SyncSideEffectFree,AltFormat						// Vector Round to Single-Precision Integer toward +Infinity
xvrspiz     xvrspiz     F0000264 IsVSX,SyncSideEffectFree,AltFormat						// Vector Round to Single-Precision Integer toward Zero
xvrsqrtedp  xvrsqrtedp  F0000328 IsVSX,DoubleFP,SyncSideEffectFree,AltFormat					// Vector Reciprocal Square Root Estimate Double-Precision
xvrsqrtesp  xvrsqrtesp  F0000228 IsVSX,SyncSideEffectFree,AltFormat						// Vector Reciprocal Square Root Estimate Single-Precision
xvsqrtsp    xvsqrtsp    F000022C IsVSX,SyncSideEffectFree,AltFormat						// Vector Square Root Single-Precision
xvsubsp     xvsubsp     F0000240 IsVSX,SyncSideEffectFree							// Vector Subtract Single-Precision
